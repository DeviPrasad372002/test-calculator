
# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]  # behave like a namespace package
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

# Optional Django bootstrap to avoid masking real failures by default.
if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

import os
os.environ.setdefault('QT_QPA_PLATFORM', 'offscreen')
for __qt_root in ['PyQt5','PyQt6','PySide2','PySide6']:
    try:
        import importlib.util as _iu
        if _iu.find_spec(__qt_root) is None:
            raise ImportError
    except Exception:
        pass
# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

import pytest
import inspect
import os

try:
    import Calculator as calc_mod
    import SimpleCalculatorPyQt1 as ui_mod
    from PyQt5.QtWidgets import QApplication, QFileDialog
except ImportError:
    pytest.skip("requires Calculator, SimpleCalculatorPyQt1 and PyQt5 to run E2E UI tests", allow_module_level=True)


Calculator = getattr(calc_mod, "Calculator")
CalculatorError = getattr(calc_mod, "CalculatorError", ZeroDivisionError)


import builtins
from unittest import mock


@pytest.mark.parametrize(
    "method, a, b, expected",
    [
        ("add", 1, 2, 3),
        ("subtract", 5, 3, 2),
        ("multiply", -2, 4, -8),
        ("divide", 10, 2, 5),
        ("add", 0.1, 0.2, 0.30000000000000004),  # floating point path
    ],
)
def test_calculator_basic_operations(method, a, b, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = Calculator()

    # Act
    func = getattr(calc, method)
    result = func(a, b)

    # Assert
    assert isinstance(result, (int, float)), "result should be numeric"
    assert result == expected


def test_calculator_divide_by_zero_raises():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = Calculator()
    exc = CalculatorError

    # Act / Assert
    with pytest.raises(exc):
        calc.divide(1, 0)


def _find_first_list_attr(obj):
    for name in dir(obj):
        if name.startswith("__"):
            continue
        try:
            val = getattr(obj, name)
        except Exception:
            continue
        if isinstance(val, list):
            return name, val
    return None, None


def _find_text_like_attributes(obj):
    text_attrs = []
    for name in dir(obj):
        if name.startswith("__"):
            continue
        try:
            val = getattr(obj, name)
        except Exception:
            continue
        if callable(getattr(val, "text", None)):
            text_attrs.append((name, val))
    return text_attrs


def _call_possible_bound_method(obj, name, *args):
    method = getattr(obj, name)
    try:
        return method(*args)
    except TypeError:
        # Try calling with different signature (pass single arg if provided)
        if args:
            return method(args[0])
        raise


def test_mainwindow_save_and_clear_history_file_io(tmp_path, monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Ensure a QApplication exists for widgets to function
    app = QApplication.instance() or QApplication([])

    mainwin = ui_mod.MainWindow()

    # Find a list-like attribute to act as history; fallback create an attribute
    hist_attr_name, hist_list = _find_first_list_attr(mainwin)
    if hist_attr_name is None:
        # create a list attribute expected by save_history implementation
        hist_attr_name = "_test_history"
        hist_list = []
        setattr(mainwin, hist_attr_name, hist_list)

    # Populate history with deterministic entries
    hist_list.clear()
    hist_list.extend(["1 + 2 = 3", "5 * 6 = 30"])

    # Prepare file path and monkeypatch QFileDialog.getSaveFileName to return it
    save_path = tmp_path / "history.txt"
    def fake_getsave(*args, **kwargs):
        # QFileDialog.getSaveFileName often returns a tuple (filename, filter)
        return (str(save_path), "")
    monkeypatch.setattr(QFileDialog, "getSaveFileName", fake_getsave)

    # Act: call save_history; handle possible signature differences
    save_method_name = "save_history"
    assert hasattr(mainwin, save_method_name), "MainWindow must implement save_history"
    try:
        _call_possible_bound_method(mainwin, save_method_name)
    except Exception as e:
        pytest.fail(f"save_history raised an unexpected exception: {e}")

    # Assert: file exists and contents include history entries
    assert save_path.exists(), "history file should be created by save_history"
    content = save_path.read_text(encoding="utf-8")
    # Ensure each history line was saved
    for entry in hist_list:
        assert entry in content

    # Act: call clear_history and assert underlying list becomes empty
    clear_method_name = "clear_history"
    assert hasattr(mainwin, clear_method_name), "MainWindow must implement clear_history"
    try:
        _call_possible_bound_method(mainwin, clear_method_name)
    except Exception as e:
        pytest.fail(f"clear_history raised an unexpected exception: {e}")

    # Refresh the reference in case implementation replaced the attribute
    new_hist = getattr(mainwin, hist_attr_name, None)
    assert new_hist is not None, "history attribute should still exist after clear_history"
    # Assert history list is empty
    assert isinstance(new_hist, list)
    assert len(new_hist) == 0


def test_mainwindow_clear_input_affects_text_widgets_no_crash():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    app = QApplication.instance() or QApplication([])

    mainwin = ui_mod.MainWindow()

    # Locate text-like attributes (widgets exposing text())
    text_attrs = _find_text_like_attributes(mainwin)
    # If none are found, create a dummy attribute that mimics a text widget
    created_dummy = False
    if not text_attrs:
        class DummyLineEdit:
            def __init__(self):
                self._text = "not empty"
            def text(self):
                return self._text
            def setText(self, s):
                self._text = s
        dummy = DummyLineEdit()
        setattr(mainwin, "_dummy_input", dummy)
        text_attrs = [("_dummy_input", dummy)]
        created_dummy = True

    # Precondition: ensure at least one widget contains non-empty text
    for name, widget in text_attrs:
        try:
            if widget.text() == "":
                # set text if possible
                setter = getattr(widget, "setText", None)
                if callable(setter):
                    setter("42")
        except Exception:
            # ignore widgets that misbehave on text()/setText()
            continue

    # Act: call clear_input
    clear_input_name = "clear_input"
    assert hasattr(mainwin, clear_input_name), "MainWindow should implement clear_input"
    try:
        _call_possible_bound_method(mainwin, clear_input_name)
    except Exception as e:
        pytest.fail(f"clear_input raised an unexpected exception: {e}")

    # Assert: all text-like widgets report empty string
    for name, widget in text_attrs:
        try:
            txt = widget.text()
        except Exception:
            # If calling text() raises, consider that a failure
            pytest.fail(f"calling text() on widget '{name}' raised an exception")
        assert txt == "", f"widget '{name}' should be empty after clear_input"

    # Cleanup dummy if created
    if created_dummy:
        delattr(mainwin, "_dummy_input")
