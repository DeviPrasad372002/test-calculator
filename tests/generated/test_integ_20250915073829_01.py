
# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]  # behave like a namespace package
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

# Optional Django bootstrap to avoid masking real failures by default.
if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

import os
os.environ.setdefault('QT_QPA_PLATFORM', 'offscreen')
for __qt_root in ['PyQt5','PyQt6','PySide2','PySide6']:
    try:
        import importlib.util as _iu
        if _iu.find_spec(__qt_root) is None:
            raise ImportError
    except Exception:
        pass
# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

import importlib
import inspect
import pytest

# Guard third-party imports (PyQt5) at module level.
try:
    import PyQt5  # noqa: F401
except ImportError:
    pytest.skip("PyQt5 is required for these integration tests", allow_module_level=True)

# Import target modules; skip the whole module if not present.
try:
    calc_mod = importlib.import_module("Calculator")
    ui_mod = importlib.import_module("SimpleCalculatorPyQt1")
except ImportError as e:
    pytest.skip(f"Required project module not available: {e}", allow_module_level=True)


@pytest.mark.parametrize(
    "func_name,a,b,expected",
    [
        ("add", 1, 2, 3),
        ("add", -1, -2, -3),
        ("subtract", 5, 3, 2),
        ("subtract", 3, 5, -2),
        ("multiply", 2, 3, 6),
        ("divide", 6, 3, 2.0),
        ("divide", 7, 2, 3.5),
    ],
)
def test_calculator_operations_integration(func_name, a, b, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: get the function from the Calculator module or skip if missing
    func = getattr(calc_mod, func_name, None)
    if func is None or not callable(func):
        pytest.skip(f"{func_name} is not available in Calculator module")

    # Act: call the function
    result = func(a, b)

    # Assert: concrete output and type
    assert result == expected, f"{func_name}({a},{b}) returned {result}, expected {expected}"
    assert isinstance(result, (int, float)), "Result should be numeric"


def test_divide_by_zero_raises_calculator_error():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: prepare divide function and CalculatorError fallback
    divide = getattr(calc_mod, "divide", None)
    if divide is None or not callable(divide):
        pytest.skip("divide function not available in Calculator module")

    CalculatorError = getattr(calc_mod, "CalculatorError", ZeroDivisionError)

    # Act / Assert: dividing by zero should raise CalculatorError or ZeroDivisionError
    with pytest.raises(CalculatorError):
        divide(1, 0)


def test_save_history_writes_file_using_calculator_results(tmp_path):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: obtain add/subtract functions to compose a history and save_history function
    add = getattr(calc_mod, "add", None)
    subtract = getattr(calc_mod, "subtract", None)
    save_history = getattr(ui_mod, "save_history", None)

    if not (callable(add) and callable(subtract)):
        pytest.skip("Calculator add/subtract functions are required for this test")

    if save_history is None or not callable(save_history):
        pytest.skip("save_history is not available in UI module")

    # Create a simple history string using the Calculator functions
    a1, b1 = 1, 2
    a2, b2 = 5, 3
    r1 = add(a1, b1)
    r2 = subtract(a2, b2)
    history = f"{a1} + {b1} = {r1}\n{a2} - {b2} = {r2}\n"

    out_file = tmp_path / "history.txt"
    out_path_str = str(out_file)

    # Act: try calling save_history with a couple of likely signatures.
    # Support either save_history(history, filename) or save_history(filename, history)
    called = False
    try:
        # Try history first
        save_history(history, out_path_str)
        called = True
    except TypeError:
        try:
            # Try reversed order
            save_history(out_path_str, history)
            called = True
        except TypeError:
            # Inspect signature: if it only takes one parameter, attempt to pass filename
            sig = inspect.signature(save_history)
            params = list(sig.parameters)
            if len(params) == 1:
                try:
                    save_history(out_path_str)
                    called = True
                except Exception:
                    pytest.skip("save_history has an unsupported signature for automated testing")
            else:
                pytest.skip("save_history has an unsupported signature for automated testing")

    if not called:
        pytest.skip("Could not invoke save_history with a supported signature")

    # Assert: file was created and contains the history text (at least the numbers we expect)
    assert out_file.exists(), "save_history did not create the expected output file"
    content = out_file.read_text()
    assert str(r1) in content and str(r2) in content, "Saved history file does not contain expected results"


def test_clear_input_and_clear_history_call_widget_methods(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: get clear_input and clear_history callables
    clear_input = getattr(ui_mod, "clear_input", None)
    clear_history = getattr(ui_mod, "clear_history", None)

    if clear_input is None and clear_history is None:
        pytest.skip("Both clear_input and clear_history are unavailable in UI module")

    # Create fake widgets that record calls
    class FakeLineEdit:
        def __init__(self, text="initial"):
            self._text = text
            self.set_calls = []

        def setText(self, text):
            self.set_calls.append(text)
            self._text = text

        def text(self):
            return self._text

        def clear(self):
            self.setText("")

    class FakeTextWidget:
        def __init__(self, content="history"):
            self._content = content
            self.cleared = False

        def clear(self):
            self._content = ""
            self.cleared = True

        def toPlainText(self):
            return self._content

    fake_line = FakeLineEdit()
    fake_text = FakeTextWidget()

    # Act / Assert for clear_input
    if clear_input is not None:
        sig = inspect.signature(clear_input)
        params = list(sig.parameters)
        if len(params) == 1:
            # Act
            clear_input(fake_line)
            # Assert: fake widget should have been cleared (setText called with empty string) or at least mutated
            assert fake_line._text == "" or "" in fake_line.set_calls, "clear_input did not clear the provided widget"
        else:
            pytest.skip("clear_input has an unexpected signature; cannot test safely")

    # Act / Assert for clear_history
    if clear_history is not None:
        sig = inspect.signature(clear_history)
        params = list(sig.parameters)
        if len(params) == 1:
            # Act
            clear_history(fake_text)
            # Assert: fake text widget should have been cleared
            assert fake_text.cleared or fake_text.toPlainText() == "", "clear_history did not clear the provided widget"
        else:
            pytest.skip("clear_history has an unexpected signature; cannot test safely")
