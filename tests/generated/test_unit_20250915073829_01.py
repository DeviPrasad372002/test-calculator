
# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]  # behave like a namespace package
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

# Optional Django bootstrap to avoid masking real failures by default.
if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

import os
os.environ.setdefault('QT_QPA_PLATFORM', 'offscreen')
for __qt_root in ['PyQt5','PyQt6','PySide2','PySide6']:
    try:
        import importlib.util as _iu
        if _iu.find_spec(__qt_root) is None:
            raise ImportError
    except Exception:
        pass
# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

import importlib
import pytest

# Import the module under test
calc_module = importlib.import_module("Calculator")

# Guard third-party imports if any other test files need them (none required here).
try:
    import PyQt5  # noqa: F401
except ImportError:
    # If PyQt5 is missing, skip only tests that require it. These tests do not require PyQt5,
    # so we do not call pytest.skip() here; this try/except illustrates the guard pattern.
    pass


@pytest.mark.parametrize(
    "a,b,expected,expected_type",
    [
        (1, 2, 3, int),
        (0, 0, 0, int),
        (-5, 3, -2, int),
        (1_000_000_000, 2_000_000_000, 3_000_000_000, int),
        (1.5, 2.5, 4.0, float),
        (-1.25, 0.25, -1.0, float),
    ],
)
def test_add_returns_correct_sum_for_various_numeric_inputs(a, b, expected, expected_type):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calculator = calc_module.Calculator()

    # Act
    result = calculator.add(a, b)

    # Assert
    assert result == expected, "add did not return the expected numeric sum"
    assert isinstance(result, expected_type), "add returned value of unexpected type"


@pytest.mark.parametrize(
    "a,b,expected,expected_type",
    [
        (5, 3, 2, int),
        (0, 5, -5, int),
        (-2, -3, 1, int),
        (2.5, 1.0, 1.5, float),
        (-1.0, 2.5, -3.5, float),
    ],
)
def test_subtract_returns_correct_difference_for_various_numeric_inputs(a, b, expected, expected_type):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calculator = calc_module.Calculator()

    # Act
    result = calculator.subtract(a, b)

    # Assert
    assert result == expected, "subtract did not return the expected numeric difference"
    assert isinstance(result, expected_type), "subtract returned value of unexpected type"


def test_init_creates_callable_operations_and_initial_history_state():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange & Act
    calculator = calc_module.Calculator()

    # Assert: public operation methods exist and are callable
    assert hasattr(calculator, "add") and callable(getattr(calculator, "add")), "Calculator must expose callable add"
    assert hasattr(calculator, "subtract") and callable(getattr(calculator, "subtract")), "Calculator must expose callable subtract"

    # If a history attribute is present, ensure it is initialized to an empty list
    if hasattr(calculator, "history"):
        history = getattr(calculator, "history")
        assert isinstance(history, list), "history attribute, if present, must be a list"
        assert len(history) == 0, "history should start empty after __init__"


def test_add_raises_on_invalid_operand_types():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calculator = calc_module.Calculator()
    # Use the module's CalculatorError if provided, otherwise fall back to TypeError
    expected_exception = getattr(calc_module, "CalculatorError", TypeError)

    # Act / Assert: adding a non-numeric operand should raise an appropriate error
    with pytest.raises(expected_exception):
        calculator.add("not-a-number", 1)
