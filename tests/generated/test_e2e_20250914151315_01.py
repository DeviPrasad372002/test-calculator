
# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.exists(_target):
    if _target not in sys.path: sys.path.insert(0, _target)
    try: os.chdir(_target)
    except Exception: pass

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

def _apply_compatibility_fixes():
    try:
        import jinja2
        if not hasattr(jinja2, 'Markup'):
            try:
                from markupsafe import Markup, escape
                jinja2.Markup = Markup
                if not hasattr(jinja2, 'escape'):
                    jinja2.escape = escape
            except Exception:
                pass
    except ImportError:
        pass
    try:
        import collections as _collections, collections.abc as _abc
        for _n in ('Mapping','MutableMapping','Sequence','Iterable','Container',
                   'MutableSequence','Set','MutableSet','Iterator','Generator','Callable','Collection'):
            if not hasattr(_collections, _n) and hasattr(_abc, _n):
                setattr(_collections, _n, getattr(_abc, _n))
    except Exception:
        pass
    try:
        import marshmallow as _mm
        if not hasattr(_mm, "__version__"):
            _mm.__version__ = "4"
    except Exception:
        pass

_apply_compatibility_fixes()

# Minimal, safe Django bootstrap. If anything goes wrong, skip the module (repo-agnostic).
try:
    import django
    from django.conf import settings as _dj_settings
    from django import apps as _dj_apps

    if not _dj_settings.configured:
        _cfg = dict(
            DEBUG=True,
            SECRET_KEY='pytest-secret',
            DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
            INSTALLED_APPS=[
                'django.contrib.auth','django.contrib.contenttypes',
                'django.contrib.sessions','django.contrib.messages'
            ],
            MIDDLEWARE=[
                'django.middleware.security.SecurityMiddleware',
                'django.contrib.sessions.middleware.SessionMiddleware',
                'django.middleware.common.CommonMiddleware',
            ],
            USE_TZ=True, TIME_ZONE='UTC',
        )
        try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
        except Exception: pass
        try: _dj_settings.configure(**_cfg)
        except Exception: pass

    if not _dj_apps.ready:
        try: django.setup()
        except Exception: pass

    # Probe a known Django core that previously crashed on some stacks.
    try:
        import django.contrib.auth.base_user as _dj_probe  # noqa
    except Exception as _e:
        _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
except Exception as _e:
    # Do NOT crash the entire test session â€“ make the module opt-out.
    _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)


for __qt_root in ["PyQt5","PyQt6","PySide2","PySide6"]:
    try:
        import importlib.util as _iu
        if _iu.find_spec(__qt_root) is None:
            raise ImportError
    except Exception:
        pass

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    import types
    from unittest import mock
    import Calculator as CalcMod
    import SimpleCalculatorPyQt1 as UI
except Exception:
    import pytest
    pytest.skip("Required test modules not available", allow_module_level=True)

def _exc_lookup(name, fallback):
    # Try to find an exception class by name in known modules, else return fallback
    for mod in (CalcMod, UI):
        if hasattr(mod, name):
            attr = getattr(mod, name)
            if isinstance(attr, _exc_lookup("type", Exception)) and issubclass(attr, BaseException):
                return attr
    return fallback

@pytest.mark.parametrize("a,b,expected", [
    (2, 3, 5),
    (0, 0, 0),
    (-1, 1, 0),
    (2.5, 1.25, 3.75),
    (10**9, 1, 10**9 + 1),
])
def test_add_basic_module_and_class(a, b, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    module_add = getattr(CalcMod, "add", None)
    CalculatorClass = getattr(CalcMod, "Calculator", None)
    if module_add is None and CalculatorClass is None:
        pytest.skip("No add implementation (module-level or Calculator.add) found")

    # Act & Assert for module-level function if present
    if module_add is not None:
        result = module_add(a, b)
        # Assert: result is numeric and equals expected (use approx for floats)
        assert isinstance(result, (int, float)), "module add should return a numeric type"
        if isinstance(expected, _exc_lookup("float", Exception)) or isinstance(result, _exc_lookup("float", Exception)):
            assert result == pytest.approx(expected)
        else:
            assert result == expected

    # Act & Assert for Calculator instance method if present
    if CalculatorClass is not None:
        calc = CalculatorClass()
        instance_add = getattr(calc, "add", None)
        if instance_add is None:
            pytest.skip("Calculator instance has no add method")
        result_inst = instance_add(a, b)
        assert isinstance(result_inst, (int, float)), "Calculator.add should return a numeric type"
        if isinstance(expected, _exc_lookup("float", Exception)) or isinstance(result_inst, _exc_lookup("float", Exception)):
            assert result_inst == pytest.approx(expected)
        else:
            assert result_inst == expected

@pytest.mark.parametrize("a,b,expected", [
    (5, 3, 2),
    (0, 0, 0),
    (-1, -1, 0),
    (2.5, 1.25, 1.25),
    (-(10**12), 1, -(10**12) - 1),
])
def test_subtract_basic_module_and_class(a, b, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    module_sub = getattr(CalcMod, "subtract", None)
    CalculatorClass = getattr(CalcMod, "Calculator", None)
    if module_sub is None and CalculatorClass is None:
        pytest.skip("No subtract implementation (module-level or Calculator.subtract) found")

    # Act & Assert for module-level function if present
    if module_sub is not None:
        result = module_sub(a, b)
        assert isinstance(result, (int, float)), "module subtract should return a numeric type"
        if isinstance(expected, _exc_lookup("float", Exception)) or isinstance(result, _exc_lookup("float", Exception)):
            assert result == pytest.approx(expected)
        else:
            assert result == expected

    # Act & Assert for Calculator instance method if present
    if CalculatorClass is not None:
        calc = CalculatorClass()
        instance_sub = getattr(calc, "subtract", None)
        if instance_sub is None:
            pytest.skip("Calculator instance has no subtract method")
        result_inst = instance_sub(a, b)
        assert isinstance(result_inst, (int, float)), "Calculator.subtract should return a numeric type"
        if isinstance(expected, _exc_lookup("float", Exception)) or isinstance(result_inst, _exc_lookup("float", Exception)):
            assert result_inst == pytest.approx(expected)
        else:
            assert result_inst == expected

@pytest.mark.parametrize("invalid_a,invalid_b", [
    ("a", 1),
    (1, "b"),
    (None, 1),
    (1, None),
    (object(), 2),
])
def test_add_raises_on_invalid_types(invalid_a, invalid_b):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    module_add = getattr(CalcMod, "add", None)
    CalculatorClass = getattr(CalcMod, "Calculator", None)
    exc_cls = _exc_lookup("CalculatorError", Exception)

    # Act & Assert for module-level function if present
    if module_add is not None:
        with pytest.raises(_exc_lookup("exc_cls", Exception)):
            module_add(invalid_a, invalid_b)

    # Act & Assert for Calculator instance method if present
    if CalculatorClass is not None:
        calc = CalculatorClass()
        instance_add = getattr(calc, "add", None)
        if instance_add is None:
            pytest.skip("Calculator instance has no add method")
        with pytest.raises(_exc_lookup("exc_cls", Exception)):
            instance_add(invalid_a, invalid_b)
