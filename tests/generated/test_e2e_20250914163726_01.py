
# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.exists(_target):
    if _target not in sys.path: sys.path.insert(0, _target)
    try: os.chdir(_target)
    except Exception: pass

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

def _apply_compatibility_fixes():
    try:
        import jinja2
        if not hasattr(jinja2, 'Markup'):
            try:
                from markupsafe import Markup, escape
                jinja2.Markup = Markup
                if not hasattr(jinja2, 'escape'):
                    jinja2.escape = escape
            except Exception:
                pass
    except ImportError:
        pass
    try:
        import collections as _collections, collections.abc as _abc
        for _n in ('Mapping','MutableMapping','Sequence','Iterable','Container',
                   'MutableSequence','Set','MutableSet','Iterator','Generator','Callable','Collection'):
            if not hasattr(_collections, _n) and hasattr(_abc, _n):
                setattr(_collections, _n, getattr(_abc, _n))
    except Exception:
        pass
    try:
        import marshmallow as _mm
        if not hasattr(_mm, "__version__"):
            _mm.__version__ = "4"
    except Exception:
        pass

_apply_compatibility_fixes()

# Minimal, safe Django bootstrap. If anything goes wrong, skip the module (repo-agnostic).
try:
    import django
    from django.conf import settings as _dj_settings
    from django import apps as _dj_apps

    if not _dj_settings.configured:
        _cfg = dict(
            DEBUG=True,
            SECRET_KEY='pytest-secret',
            DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
            INSTALLED_APPS=[
                'django.contrib.auth','django.contrib.contenttypes',
                'django.contrib.sessions','django.contrib.messages'
            ],
            MIDDLEWARE=[
                'django.middleware.security.SecurityMiddleware',
                'django.contrib.sessions.middleware.SessionMiddleware',
                'django.middleware.common.CommonMiddleware',
            ],
            USE_TZ=True, TIME_ZONE='UTC',
        )
        try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
        except Exception: pass
        try: _dj_settings.configure(**_cfg)
        except Exception: pass

    if not _dj_apps.ready:
        try: django.setup()
        except Exception: pass

    # Probe a known Django core that previously crashed on some stacks.
    try:
        import django.contrib.auth.base_user as _dj_probe  # noqa
    except Exception as _e:
        _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
except Exception as _e:
    # Do NOT crash the entire test session â€“ make the module opt-out.
    _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)


for __qt_root in ["PyQt5","PyQt6","PySide2","PySide6"]:
    try:
        import importlib.util as _iu
        if _iu.find_spec(__qt_root) is None:
            raise ImportError
    except Exception:
        pass

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

import pytest

try:
    import Calculator as Calculator_module
except ImportError:
    pytest.skip("Calculator module not available", allow_module_level=True)

def _exc_lookup(name, fallback):
    return getattr(Calculator_module, name, fallback)

@pytest.mark.parametrize(
    "a,b,expected",
    [
        (1, 2, 3),                   # simple integers
        (0, 0, 0),                   # zeros
        (-1, -2, -3),                # negatives
        (1.5, 2.25, 3.75),           # floats
        (10**18, 10**18, 2 * 10**18) # large integers (boundary)
    ]
)
def test_add_returns_expected_values(a, b, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = Calculator_module.Calculator()
    # Act
    result = calc.add(a, b)
    # Assert
    if isinstance(expected, _exc_lookup("float", Exception)):
        assert result == pytest.approx(expected)
    else:
        assert result == expected
    assert isinstance(result, (int, float))

@pytest.mark.parametrize(
    "a,b,expected",
    [
        (5, 3, 2),                   # simple integers
        (0, 0, 0),                   # zeros
        (-1, -2, 1),                 # negatives
        (2.5, 1.25, 1.25),           # floats
        (-(10**18), 10**18, -2 * 10**18) # large values (boundary)
    ]
)
def test_subtract_returns_expected_values(a, b, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = Calculator_module.Calculator()
    # Act
    result = calc.subtract(a, b)
    # Assert
    if isinstance(expected, _exc_lookup("float", Exception)):
        assert result == pytest.approx(expected)
    else:
        assert result == expected
    assert isinstance(result, (int, float))

def test_add_float_precision_edge_case():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = Calculator_module.Calculator()
    a, b = 0.1, 0.2
    # Act
    result = calc.add(a, b)
    # Assert: allow floating point rounding tolerance
    assert result == pytest.approx(0.3, rel=1e-9, abs=1e-12)
    assert isinstance(result, _exc_lookup("float", Exception))

@pytest.mark.parametrize("a,b", [
    ("a", 1),
    (None, 1),
    ([1, 2], 3),
    (object(), 5)
])
def test_add_raises_on_non_numeric_inputs(a, b):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = Calculator_module.Calculator()
    exc = _exc_lookup("CalculatorError", Exception)
    # Act / Assert
    with pytest.raises(_exc_lookup("exc", Exception)):
        calc.add(a, b)
