
# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]  # behave like a namespace package
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

# Optional Django bootstrap to avoid masking real failures by default.
if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

import os
os.environ.setdefault('QT_QPA_PLATFORM', 'offscreen')
for __qt_root in ['PyQt5','PyQt6','PySide2','PySide6']:
    try:
        import importlib.util as _iu
        if _iu.find_spec(__qt_root) is None:
            raise ImportError
    except Exception:
        pass
# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    import PyQt5  # third-party: required for these integration tests
except ImportError:
    import pytest
    pytest.skip("PyQt5 is required for these integration tests", allow_module_level=True)

try:
    from target import Calculator as calc
    from target import SimpleCalculatorPyQt1 as appmod
except ImportError:
    pytest.skip("Required target modules (Calculator, SimpleCalculatorPyQt1) are not importable", allow_module_level=True)

import builtins
import inspect
from unittest import mock
from pathlib import Path

# Helper to flexibly obtain multiply/divide callables from the Calculator module
def _get_callable(mod, name):
    if hasattr(mod, name):
        return getattr(mod, name)
    if hasattr(mod, 'Calculator'):
        cls = getattr(mod, 'Calculator')
        if hasattr(cls, name):
            inst = cls()
            return getattr(inst, name)
    raise AttributeError(f"Neither module nor Calculator class exposes {name}")

@pytest.mark.parametrize(
    "a,b,expected",
    [
        (3, 4, 12),
        (0, 5, 0),
        (-2, 3, -6),
    ],
)
def test_multiply_returns_expected_types_and_values(a, b, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    multiply = _get_callable(calc, 'multiply')

    # Act
    result = multiply(a, b)

    # Assert
    assert isinstance(result, (int, float)), "multiply should return a numeric type"
    assert result == expected

@pytest.mark.parametrize(
    "num,den,expected",
    [
        (10, 2, 5),
        (9, -3, -3),
    ],
)
def test_divide_returns_expected_and_zero_division_raises(num, den, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    divide = _get_callable(calc, 'divide')
    CalculatorError = getattr(calc, 'CalculatorError', ZeroDivisionError)

    # Act & Assert - normal cases
    result = divide(num, den)
    assert isinstance(result, (int, float))
    assert result == expected

    # Act & Assert - division by zero raises the module's error (or ZeroDivisionError fallback)
    with pytest.raises(CalculatorError):
        divide(num, 0)

def _make_dummy_history_widget(items):
    # A dummy widget that mimics Qt list widget methods commonly used in examples
    class Item:
        def __init__(self, text):
            self._text = text
        def text(self):
            return self._text

    class DummyWidget:
        def __init__(self, items):
            self._items = list(items)
        def count(self):
            return len(self._items)
        def item(self, idx):
            return Item(self._items[idx])
        # Some implementations iterate directly
        def __iter__(self):
            for t in self._items:
                yield Item(t)
    return DummyWidget(items)

def _make_dummy_mainwindow(history_items):
    # Provide multiple possible attribute names that save_history might look up
    class DummyMain:
        def __init__(self, items):
            self.history = list(items)
            self.history_items = list(items)
            self.historyWidget = _make_dummy_history_widget(items)
            self.listWidget = _make_dummy_history_widget(items)
            self.ui = mock.Mock()
            # ui.history could be used by some implementations
            self.ui.history = _make_dummy_history_widget(items)
    return DummyMain(history_items)

def _attempt_save_history_call(save_history_fn, dummy_main, path):
    # Try a few likely signatures until one works or all fail with TypeError
    candidates = [
        lambda: save_history_fn(dummy_main, str(path)),
        lambda: save_history_fn(str(path)),
        lambda: save_history_fn(path),
        lambda: save_history_fn(dummy_main, path),
        lambda: save_history_fn(),  # some examples might prompt for a filename; included for completeness
    ]
    last_error = None
    for cand in candidates:
        try:
            return cand()
        except TypeError as te:
            last_error = te
            continue
    # If we exhausted options, re-raise the last TypeError so the test framework reports it
    raise last_error if last_error is not None else RuntimeError("save_history could not be called")

def test_save_history_writes_history_to_file(tmp_path, monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    if not hasattr(appmod, 'save_history'):
        pytest.skip("save_history not present in SimpleCalculatorPyQt1 module")
    save_history = appmod.save_history

    # Build a dummy main window with history entries that include multiplication/division results
    entries = ["3 x 4 = 12", "10 / 2 = 5"]
    dummy = _make_dummy_mainwindow(entries)

    out_file = tmp_path / "history.txt"

    # Capture writes using mock_open
    written = {"data": ""}
    def fake_open(file, mode='r', *args, **kwargs):
        # ensure correct target file
        assert Path(file).name == out_file.name
        # Return a simple context manager object that captures writes
        class F:
            def write(self, s):
                written["data"] += str(s)
            def writelines(self, lines):
                for l in lines:
                    written["data"] += str(l)
            def __enter__(self):
                return self
            def __exit__(self, exc_type, exc, tb):
                return False
        return F()

    monkeypatch.setattr(builtins, 'open', fake_open)

    # Act
    _attempt_save_history_call(save_history, dummy, out_file)

    # Assert - ensure some representation of the history entries was written
    for e in entries:
        assert e in written["data"], f"Expected history entry '{e}' to be written; got: {written['data']}"

def test_save_history_propagates_io_errors(tmp_path, monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    if not hasattr(appmod, 'save_history'):
        pytest.skip("save_history not present in SimpleCalculatorPyQt1 module")
    save_history = appmod.save_history
    dummy = _make_dummy_mainwindow(["A", "B"])
    out_file = tmp_path / "history.txt"

    # Make open raise an OSError (simulate disk full / permission denied)
    def raising_open(*args, **kwargs):
        raise OSError("simulated I/O error")
    monkeypatch.setattr(builtins, 'open', raising_open)

    # Act / Assert - calling save_history should propagate the OSError (or a wrapped exception)
    with pytest.raises(OSError):
        _attempt_save_history_call(save_history, dummy, out_file)
