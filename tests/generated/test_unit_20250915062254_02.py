
# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT")
if _target and os.path.isdir(_target):
    if _target not in sys.path: sys.path.insert(0, _target)

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

# Optional Django bootstrap to avoid masking real failures by default.
if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

import os
os.environ.setdefault('QT_QPA_PLATFORM', 'offscreen')
for __qt_root in ['PyQt5','PyQt6','PySide2','PySide6']:
    try:
        import importlib.util as _iu
        if _iu.find_spec(__qt_root) is None:
            raise ImportError
    except Exception:
        pass
# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import os
    import sys
    import importlib
    import inspect
    import builtins
    from types import SimpleNamespace

    # Ensure we can import modules from the 'target' directory next to this test file
    THIS_DIR = os.path.dirname(__file__)
    TARGET_DIR = os.path.join(THIS_DIR, "target")
    if os.path.isdir(TARGET_DIR) and TARGET_DIR not in sys.path:
        sys.path.insert(0, TARGET_DIR)

    Calculator = importlib.import_module("Calculator")
    SimpleCalc = importlib.import_module("SimpleCalculatorPyQt1")
except (ImportError, ModuleNotFoundError) as e:
    import pytest
    pytest.skip(f"Required module missing: {e}", allow_module_level=True)

import pytest
import inspect
from unittest import mock

def _get_callable(module, func_name, class_name="Calculator"):
    """
    Locate a callable for a function which may be either a module-level function
    or an instance method on a Calculator class. Returns (callable, instance_or_None)
    """
    # Module-level function
    if hasattr(module, func_name):
        return getattr(module, func_name), None

    # Method on class instance
    if hasattr(module, class_name):
        cls = getattr(module, class_name)
        try:
            inst = cls()
        except Exception:
            inst = None
        if inst is not None and hasattr(inst, func_name):
            return getattr(inst, func_name), inst

    pytest.skip(f"Could not locate '{func_name}' as a function or on {class_name}")

@pytest.mark.parametrize(
    "a,b,expected",
    [
        (2, 3, 6),
        (2.5, 4, 10.0),
        (0, 5, 0),
        (-2, 3, -6),
    ],
)
def test_multiply_various_numeric_types(a, b, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    multiply_callable, inst = _get_callable(Calculator, "multiply")

    # Act
    result = multiply_callable(a, b)

    # Assert
    assert result == expected, f"multiply({a}, {b}) returned {result}, expected {expected}"
    # Maintain concrete type expectations: if expected is int, result should be int; if float, float
    assert type(result) is type(expected), f"multiply returned type {type(result).__name__}, expected {type(expected).__name__}"

@pytest.mark.parametrize(
    "numerator,denominator,expected",
    [
        (6, 3, 2.0),
        (5, 2, 2.5),
        (0, 5, 0.0),
    ],
)
def test_divide_normal_cases(numerator, denominator, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    divide_callable, inst = _get_callable(Calculator, "divide")

    # Act
    result = divide_callable(numerator, denominator)

    # Assert numeric correctness and type (division typically yields float)
    assert result == expected
    assert isinstance(result, float), "Expected division results to be float"

def test_divide_by_zero_raises_expected_error():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    divide_callable, inst = _get_callable(Calculator, "divide")
    # Prefer custom CalculatorError if provided, otherwise fall back to ZeroDivisionError
    expected_exc = getattr(Calculator, "CalculatorError", ZeroDivisionError)

    # Act / Assert
    with pytest.raises(expected_exc):
        divide_callable(1, 0)

def _locate_save_history():
    """
    Locate a save_history callable. It might be:
    - a module-level function SimpleCalc.save_history
    - a method on SimpleCalc.MainWindow class
    Returns (callable, requires_self_bool, owner_module_or_class)
    """
    if hasattr(SimpleCalc, "save_history") and callable(getattr(SimpleCalc, "save_history")):
        return getattr(SimpleCalc, "save_history"), False, SimpleCalc

    if hasattr(SimpleCalc, "MainWindow"):
        mw_cls = getattr(SimpleCalc, "MainWindow")
        if hasattr(mw_cls, "save_history"):
            # return unbound function; we'll provide a dummy self object
            return getattr(mw_cls, "save_history"), True, mw_cls

    pytest.skip("save_history not found in module or MainWindow class")

def _make_dummy_window_with_history(history_lines):
    """
    Create a minimal dummy object that mimics what save_history will inspect:
    - attribute 'history' expected to be iterable of strings
    Depending on implementation, it may inspect other attributes; keep minimal.
    """
    return SimpleNamespace(history=list(history_lines))

def _monkeypatch_qfiledialog_getsavefile(monkeypatch, target_module, chosen_path):
    """
    If target_module has QFileDialog attribute, monkeypatch its getSaveFileName to return chosen_path.
    """
    qfd = getattr(target_module, "QFileDialog", None)
    if qfd is not None:
        # getSaveFileName sometimes returns tuple (filename, filter) or a string; support both
        def fake_getsave(*args, **kwargs):
            return (str(chosen_path), "")  # typical PyQt signature returns (filename, selectedFilter)
        monkeypatch.setattr(qfd, "getSaveFileName", fake_getsave, raising=False)
        return True
    return False

def test_save_history_writes_file(tmp_path, monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    save_history_callable, requires_self, owner = _locate_save_history()
    history_lines = ["1 + 1 = 2", "2 * 2 = 4", "Divide: 4 / 2 = 2"]
    dummy = _make_dummy_window_with_history(history_lines) if requires_self else None

    out_file = tmp_path / "history_out.txt"

    # If the implementation uses QFileDialog, ensure it returns our path; otherwise, we'll monkeypatch builtins.open
    qfd_patched = _monkeypatch_qfiledialog_getsavefile(monkeypatch, owner, out_file)

    written = {"called": False}
    # Fallback: patch builtins.open to capture writes if QFileDialog isn't used or module calls open directly
    real_open = builtins.open

    def fake_open(path, mode='r', *args, **kwargs):
        # Only intercept the intended file path
        if os.path.abspath(path) == str(out_file):
            written["called"] = True
            # Use the real open to actually write data so we can inspect file contents afterwards
            return real_open(path, mode, *args, **kwargs)
        return real_open(path, mode, *args, **kwargs)

    monkeypatch.setattr(builtins, "open", fake_open)

    # Act
    if requires_self:
        # Save history is an unbound function (method). Call it with dummy self.
        sig = inspect.signature(save_history_callable)
        # Some implementations might expect only self, some may accept extra args; be conservative.
        if len(sig.parameters) == 1:
            save_history_callable(dummy)
        else:
            # pass only self and let other defaults handle
            save_history_callable(dummy)
    else:
        # Module-level function: try calling without args, or with the path if it accepts it
        sig = inspect.signature(save_history_callable)
        if len(sig.parameters) == 0:
            save_history_callable()
        else:
            # try to pass the path if a parameter exists
            save_history_callable(str(out_file))

    # Assert
    # If QFileDialog was used, fake_open will have been invoked when the function writes. If not, ensure file exists and content contains history lines.
    if os.path.exists(out_file):
        content = out_file.read_text(encoding="utf-8")
        for line in history_lines:
            assert line in content, f"Expected history line '{line}' in saved file"
    else:
        # In some implementations file may be created via open substitution, check our flag
        assert written["called"], "save_history did not write to expected path"

def test_save_history_cancel_does_not_create_file(tmp_path, monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    save_history_callable, requires_self, owner = _locate_save_history()
    history_lines = ["a = b"]
    dummy = _make_dummy_window_with_history(history_lines) if requires_self else None

    out_file = tmp_path / "should_not_exist.txt"

    # Make QFileDialog.getSaveFileName simulate user cancel: return ('', '')
    qfd = getattr(owner, "QFileDialog", None)
    if qfd is not None:
        def fake_cancel(*args, **kwargs):
            return ("", "")
        monkeypatch.setattr(qfd, "getSaveFileName", fake_cancel, raising=False)
    else:
        # If there is no QFileDialog usage, try to monkeypatch the save function to early-return when asked to write empty name.
        # We'll wrap the original and simulate a cancel if it would be called with empty path.
        original = save_history_callable
        def wrapper(*args, **kwargs):
            # If function expects a path param, pass empty string to simulate cancel
            sig = inspect.signature(original)
            if len(sig.parameters) == 0:
                return original()
            else:
                try:
                    return original("")
                except Exception:
                    # if original can't handle empty path, just return None to indicate cancel behavior
                    return None
        save_history_callable = wrapper

    # Ensure file doesn't exist before act
    if out_file.exists():
        out_file.unlink()

    # Act
    if requires_self:
        save_history_callable(dummy)
    else:
        sig = inspect.signature(save_history_callable)
        if len(sig.parameters) == 0:
            save_history_callable()
        else:
            # Pass empty string to simulate cancel if possible
            save_history_callable("")

    # Assert: no file created at the target path. If implementation used a dialog, it should not have created our path.
    assert not out_file.exists(), "No file should have been created when save was cancelled"
