
# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]  # behave like a namespace package
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

# Optional Django bootstrap to avoid masking real failures by default.
if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

import os
os.environ.setdefault('QT_QPA_PLATFORM', 'offscreen')
for __qt_root in ['PyQt5','PyQt6','PySide2','PySide6']:
    try:
        import importlib.util as _iu
        if _iu.find_spec(__qt_root) is None:
            raise ImportError
    except Exception:
        pass
# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

import inspect
import builtins
import io
import os
import types

import pytest

# Guard third-party imports at module level
try:
    import PyQt5  # optional UI dependency; skip tests if not available
except ImportError:
    pytest.skip("PyQt5 not available; skipping integration tests that involve UI module", allow_module_level=True)

# Import target modules; skip entire test module if they're not importable
try:
    import Calculator as calc_mod
    import SimpleCalculatorPyQt1 as ui_mod
except ImportError:
    pytest.skip("Required application modules (Calculator, SimpleCalculatorPyQt1) are not importable", allow_module_level=True)


@pytest.mark.parametrize(
    "a,b,op_name,expected,expect_exception",
    [
        (3, 5, "add", 8, None),
        (10, 4, "subtract", 6, None),
        (6, 7, "multiply", 42, None),
        (8, 2, "divide", 4, None),
        (5, 0, "divide", None, getattr(calc_mod, "CalculatorError", ZeroDivisionError)),
    ],
)
def test_calculator_operations_parametrized(a, b, op_name, expected, expect_exception):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: identify operation implementation (either on Calculator class or module-level function)
    CalculatorClass = getattr(calc_mod, "Calculator", None)
    op_func = None

    if CalculatorClass is not None and hasattr(CalculatorClass, op_name):
        calc_instance = CalculatorClass()  # Arrange: instantiate Calculator if available
        op_func = lambda x, y: getattr(calc_instance, op_name)(x, y)
    elif hasattr(calc_mod, op_name):
        # Arrange: use module-level function
        op_func = getattr(calc_mod, op_name)
    else:
        pytest.skip(f"Operation {op_name} not found on Calculator class or module")

    # Act / Assert
    if expect_exception is not None:
        with pytest.raises(expect_exception):
            op_func(a, b)
    else:
        result = op_func(a, b)
        # Assert: concrete value and type
        assert result == expected, f"{op_name}({a},{b}) returned {result}, expected {expected}"
        assert isinstance(result, (int, float)), "Result should be numeric (int or float)"


def _make_widget_like_history(strings):
    """
    Build a lightweight object that mimics a simple QListWidget-like API:
    - count() -> number of items
    - item(i) -> object with text() method returning the string
    - addItem(s) -> appends
    - clear() -> empties
    This is used as a fallback if save_history expects a widget rather than a list.
    """
    class Item:
        def __init__(self, text):
            self._text = text

        def text(self):
            return self._text

    class HistoryWidget:
        def __init__(self, items):
            self._items = [Item(s) for s in items]

        def count(self):
            return len(self._items)

        def item(self, idx):
            return self._items[idx]

        def addItem(self, s):
            self._items.append(Item(s))

        def clear(self):
            self._items = []

    return HistoryWidget(strings.copy())


def _try_call_save_history(func, history_arg, filepath):
    """
    Helper to try calling save_history with different history representations.
    Returns True if call succeeded, False if it raised a TypeError (signature mismatch) or ValueError.
    Other exceptions are propagated.
    """
    try:
        func(history_arg, filepath)
        return True
    except TypeError:
        return False


def test_save_history_writes_file_and_clear_history(tmp_path, monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: find save_history function
    save_history = getattr(ui_mod, "save_history", None)
    clear_history = getattr(ui_mod, "clear_history", None)
    if save_history is None:
        pytest.skip("save_history not present in UI module")

    # Prepare a simple history content derived from Calculator outputs
    calc_add = getattr(calc_mod, "add", None)
    CalculatorClass = getattr(calc_mod, "Calculator", None)
    if calc_add is None and CalculatorClass is None:
        pytest.skip("No accessible add implementation on Calculator module/class")

    if calc_add is None:
        calc_instance = CalculatorClass()
        calc_add = lambda x, y: calc_instance.add(x, y)

    numbers = [(1, 2), (3, 4), (5, 6)]
    history_strings = [f"{a} + {b} = {calc_add(a, b)}" for a, b in numbers]

    # Target file path
    out_file = tmp_path / "history_output.txt"

    # Act: Try calling save_history with a plain list first
    tried = False
    success = False
    try:
        tried = True
        success = _try_call_save_history(save_history, history_strings, str(out_file))
    except Exception:
        # If save_history raises some other exception, re-raise for test visibility
        raise

    if not success:
        # Try widget-like API fallback
        widget_history = _make_widget_like_history(history_strings)
        tried = True
        success = _try_call_save_history(save_history, widget_history, str(out_file))
        if not success:
            pytest.skip("save_history does not accept (history, filepath) with list or widget-like object signature")

    # Assert: file created and contains the expected lines
    assert out_file.exists(), "save_history did not create the expected file"
    content = out_file.read_text().strip().splitlines()
    # Ensure each history entry is present in the file (order preserved)
    assert content == history_strings

    # If clear_history exists and accepts a widget-like argument, ensure it clears the widget state
    if clear_history is not None:
        # Try clearing our widget-like object (if we used it) or build one to test clearing
        widget = widget_history if 'widget_history' in locals() else _make_widget_like_history(history_strings)
        # Arrange: ensure widget has items
        assert widget.count() == len(history_strings)
        # Act
        # Prefer to call clear_history with the widget-like object; if signature mismatch, skip assert
        try:
            clear_history(widget)
        except TypeError:
            pytest.skip("clear_history signature not compatible with our widget-like object")
        # Assert
        assert widget.count() == 0, "clear_history did not clear the provided history widget"


def test_clear_input_clears_text_field():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange: find clear_input in UI module
    clear_input = getattr(ui_mod, "clear_input", None)
    if clear_input is None:
        pytest.skip("clear_input not available in UI module")

    # Build a fake line-edit object with text(), setText(), and clear() semantics
    class FakeLineEdit:
        def __init__(self, initial):
            self._text = initial

        def text(self):
            return self._text

        def setText(self, s):
            self._text = s

        def clear(self):
            self._text = ""

    line = FakeLineEdit("12345")

    # Act
    # Try calling clear_input with the line edit object. If signature expects a window object, try attribute pattern.
    try:
        clear_input(line)
    except TypeError:
        # Try alternative: some implementations might expect a window object with a lineEdit attribute
        fake_window = types.SimpleNamespace(lineEdit=line)
        try:
            clear_input(fake_window)
        except TypeError:
            pytest.skip("clear_input signature not compatible with expected fake objects")

    # Assert: text was cleared
    assert line.text() == "" or line.text() == "", "clear_input did not clear the input field"
