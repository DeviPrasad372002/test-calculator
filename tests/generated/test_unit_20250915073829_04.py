
# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]  # behave like a namespace package
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

# Optional Django bootstrap to avoid masking real failures by default.
if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

import os
os.environ.setdefault('QT_QPA_PLATFORM', 'offscreen')
for __qt_root in ['PyQt5','PyQt6','PySide2','PySide6']:
    try:
        import importlib.util as _iu
        if _iu.find_spec(__qt_root) is None:
            raise ImportError
    except Exception:
        pass
# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    import Calculator
except ImportError as e:
    import pytest
    pytest.skip("Skipping tests because Calculator module is not importable: {}".format(e), allow_module_level=True)

from unittest import mock


@pytest.mark.parametrize(
    "func_name,a,b,expected",
    [
        ("add", 1, 2, 3),
        ("add", -1, 5, 4),
        ("subtract", 5, 2, 3),
        ("subtract", 2.5, 1.5, 1.0),
        ("multiply", 3, 4, 12),
        ("multiply", -2, -8, 16),
        ("divide", 9, 3, 3),
        ("divide", 5, 2, 2.5),
    ],
)
def test_calculator_basic_operations_parametrized(func_name, a, b, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    func = getattr(Calculator, func_name, None)
    if not callable(func):
        pytest.skip("Calculator.{!s} not present".format(func_name))

    # Act
    result = func(a, b)

    # Assert
    # concrete type and value assertions
    assert result == expected
    # check numeric types when appropriate
    if isinstance(expected, int):
        assert isinstance(result, int)
    else:
        assert isinstance(result, float)


def test_calculator_divide_by_zero_raises_calculator_error():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    divide = getattr(Calculator, "divide", None)
    if not callable(divide):
        pytest.skip("Calculator.divide not present")
    CalculatorError = getattr(Calculator, "CalculatorError", ZeroDivisionError)

    # Act / Assert
    with pytest.raises(CalculatorError):
        divide(1, 0)


def test_calculator_multiply_large_numbers_returns_exact_int():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    multiply = getattr(Calculator, "multiply", None)
    if not callable(multiply):
        pytest.skip("Calculator.multiply not present")

    a = 10 ** 18
    b = 10 ** 18
    expected = a * b

    # Act
    result = multiply(a, b)

    # Assert
    assert result == expected
    assert isinstance(result, int)


# Tests for MainWindow-related behavior. Import guarded because it may depend on PyQt5.
try:
    import SimpleCalculatorPyQt1 as SW
except ImportError as e:
    SW = None


def _get_method_or_skip(obj, name):
    method = getattr(obj, name, None)
    if method is None:
        pytest.skip("Method {} not found on {}".format(name, obj))
    return method


def test_mainwindow_clear_history_and_clear_input_affect_state():
    # Arrange-Act-Assert: generated by ai-testgen
    if SW is None:
        pytest.skip("SimpleCalculatorPyQt1 module not available")

    MainWindow = getattr(SW, "MainWindow", None)
    if MainWindow is None:
        pytest.skip("MainWindow class not present in SimpleCalculatorPyQt1")

    # Try to retrieve the unbound methods for testing without instantiating a real QWidget/QApplication
    clear_history = _get_method_or_skip(MainWindow, "clear_history")
    clear_input = _get_method_or_skip(MainWindow, "clear_input")

    # Build a fake self with a variety of attributes the real methods might expect.
    class FakeLineEdit:
        def __init__(self, initial=""):
            self._value = initial

        def clear(self):
            self._value = ""

        def setText(self, v):
            self._value = v

        def text(self):
            return self._value

        def toPlainText(self):
            return self._value

    fake = type("FakeSelf", (), {})()
    # common plausible names the implementation might use
    fake.history = ["1+1=2", "2*3=6"]
    fake.history_widget = list(fake.history)  # some implementations may use a widget or list
    fake.lineEdit = FakeLineEdit("123")
    fake.input = FakeLineEdit("456")
    fake.display = FakeLineEdit("789")

    # Act: call clear_history as an unbound function, passing fake
    try:
        clear_history(fake)
    except TypeError:
        pytest.skip("clear_history signature incompatible with test fake; skipping")
    except AttributeError:
        pytest.skip("clear_history attempted GUI operations not modeled by fake; skipping")

    # Assert: at least one of the plausible history holders should be cleared
    history_cleared = False
    if hasattr(fake, "history") and isinstance(fake.history, list):
        history_cleared = len(fake.history) == 0
    if not history_cleared and hasattr(fake, "history_widget") and isinstance(fake.history_widget, list):
        history_cleared = len(fake.history_widget) == 0

    assert history_cleared, "Expected history to be cleared by clear_history"

    # Act: call clear_input
    try:
        clear_input(fake)
    except TypeError:
        pytest.skip("clear_input signature incompatible with test fake; skipping")
    except AttributeError:
        pytest.skip("clear_input attempted GUI operations not modeled by fake; skipping")

    # Assert: at least one of the input-like widgets should now be empty
    inputs = []
    for attr in ("lineEdit", "input", "display"):
        if hasattr(fake, attr):
            val_holder = getattr(fake, attr)
            # our FakeLineEdit exposes _value; real widgets might too, so check a few ways
            val = None
            if hasattr(val_holder, "text"):
                try:
                    val = val_holder.text()
                except Exception:
                    val = None
            if val is None and hasattr(val_holder, "_value"):
                val = getattr(val_holder, "_value")
            inputs.append(val)

    assert any(v == "" for v in inputs), "Expected at least one input widget to be cleared by clear_input"


def test_mainwindow_save_history_writes_file(monkeypatch, tmp_path):
    # Arrange-Act-Assert: generated by ai-testgen
    if SW is None:
        pytest.skip("SimpleCalculatorPyQt1 module not available")

    MainWindow = getattr(SW, "MainWindow", None)
    if MainWindow is None:
        pytest.skip("MainWindow class not present in SimpleCalculatorPyQt1")

    save_history = getattr(MainWindow, "save_history", None)
    if save_history is None:
        pytest.skip("save_history not found on MainWindow")

    # Prepare fake self with plausible attributes
    fake = type("FakeSelf", (), {})()
    fake.history = ["1 + 1 = 2", "3 * 4 = 12"]

    # If implementation calls a QFileDialog.getSaveFileName, patch it to return our path
    dialog_target = getattr(SW, "QFileDialog", None)
    target_path = tmp_path / "history.txt"
    if dialog_target is not None and hasattr(dialog_target, "getSaveFileName"):
        monkeypatch.setattr(dialog_target, "getSaveFileName", lambda *a, **k: (str(target_path), None))

    m_open = mock.mock_open()
    monkeypatch.setattr("builtins.open", m_open, raising=True)

    # Try calling with a filename argument first, if the signature expects it.
    called = False
    try:
        save_history(fake, str(target_path))
        called = True
    except TypeError:
        # maybe it expects no args and uses QFileDialog; try calling without filename
        try:
            save_history(fake)
            called = True
        except TypeError:
            pytest.skip("save_history signature incompatible with test; skipping")
        except AttributeError:
            pytest.skip("save_history attempted GUI operations not modeled by fake; skipping")
    except AttributeError:
        pytest.skip("save_history attempted GUI operations not modeled by fake; skipping")

    assert called, "save_history did not complete successfully in test"

    # Assert that open was called and the history contents were written
    m_open.assert_called()  # at minimum opened a file
    handle = m_open()
    # There should be at least one write corresponding to the history contents
    write_calls = [call for call in handle.write.mock_calls] if hasattr(handle.write, "mock_calls") else None
    # If write_calls not accessible (depends on implementation), at least ensure open was used to write
    assert write_calls is None or len(write_calls) > 0 or handle.write.called
