
# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.exists(_target):
    if _target not in sys.path: sys.path.insert(0, _target)
    try: os.chdir(_target)
    except Exception: pass

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

def _apply_compatibility_fixes():
    try:
        import jinja2
        if not hasattr(jinja2, 'Markup'):
            try:
                from markupsafe import Markup, escape
                jinja2.Markup = Markup
                if not hasattr(jinja2, 'escape'):
                    jinja2.escape = escape
            except Exception:
                pass
    except ImportError:
        pass
    try:
        import collections as _collections, collections.abc as _abc
        for _n in ('Mapping','MutableMapping','Sequence','Iterable','Container',
                   'MutableSequence','Set','MutableSet','Iterator','Generator','Callable','Collection'):
            if not hasattr(_collections, _n) and hasattr(_abc, _n):
                setattr(_collections, _n, getattr(_abc, _n))
    except Exception:
        pass
    try:
        import marshmallow as _mm
        if not hasattr(_mm, "__version__"):
            _mm.__version__ = "4"
    except Exception:
        pass

_apply_compatibility_fixes()

# Minimal, safe Django bootstrap. If anything goes wrong, skip the module (repo-agnostic).
try:
    import django
    from django.conf import settings as _dj_settings
    from django import apps as _dj_apps

    if not _dj_settings.configured:
        _cfg = dict(
            DEBUG=True,
            SECRET_KEY='pytest-secret',
            DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
            INSTALLED_APPS=[
                'django.contrib.auth','django.contrib.contenttypes',
                'django.contrib.sessions','django.contrib.messages'
            ],
            MIDDLEWARE=[
                'django.middleware.security.SecurityMiddleware',
                'django.contrib.sessions.middleware.SessionMiddleware',
                'django.middleware.common.CommonMiddleware',
            ],
            USE_TZ=True, TIME_ZONE='UTC',
        )
        try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
        except Exception: pass
        try: _dj_settings.configure(**_cfg)
        except Exception: pass

    if not _dj_apps.ready:
        try: django.setup()
        except Exception: pass

    # Probe a known Django core that previously crashed on some stacks.
    try:
        import django.contrib.auth.base_user as _dj_probe  # noqa
    except Exception as _e:
        _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
except Exception as _e:
    # Do NOT crash the entire test session â€“ make the module opt-out.
    _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)


for __qt_root in ["PyQt5","PyQt6","PySide2","PySide6"]:
    try:
        import importlib.util as _iu
        if _iu.find_spec(__qt_root) is None:
            raise ImportError
    except Exception:
        pass

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    import inspect
    import builtins
    import os
    import io
    import Calculator
    import SimpleCalculatorPyQt1
    from PyQt5.QtWidgets import QFileDialog
    from unittest import mock
except ImportError as e:
    import pytest
    pytest.skip(f"skipping tests due to import error: {e}", allow_module_level=True)


def _exc_lookup(name, default=Exception):
    # Try to find an exception class by name in known modules; fallback to default
    for mod in (Calculator, SimpleCalculatorPyQt1):
        if mod and hasattr(mod, name):
            return getattr(mod, name)
    return default


@pytest.mark.parametrize(
    "a,b,expected",
    [
        (2, 3, 6),              # simple ints
        (0, 5, 0),              # zero
        (-2, 3, -6),            # negative
        (2.5, 4, 10.0),         # float * int
        (1e6, 1e3, 1e9),        # large numbers boundary-ish
    ],
)
def test_multiply_various(a, b, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange done by parametrization
    # Act
    result = Calculator.multiply(a, b)
    # Assert
    if isinstance(expected, _exc_lookup("float", Exception)):
        assert isinstance(result, _exc_lookup("float", Exception)) or isinstance(result, _exc_lookup("int", Exception))
        assert result == pytest.approx(expected)
    else:
        assert result == expected
        assert isinstance(result, (int, float))


def test_multiply_large_boundary_integer_overflow_like_behavior():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    a = 10**12
    b = 10**6
    expected = a * b
    # Act
    result = Calculator.multiply(a, b)
    # Assert: Python integers are unbounded, so ensure correct numeric result
    assert result == expected
    assert isinstance(result, _exc_lookup("int", Exception))


@pytest.mark.parametrize(
    "numerator,denominator,expected",
    [
        (6, 3, 2),               # exact integer division
        (7, 2, 3.5),             # float result
        (-9, 3, -3),             # negative numerator
        (5.0, 2.5, 2.0),         # float / float
    ],
)
def test_divide_various(numerator, denominator, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange is parametrized
    # Act
    result = Calculator.divide(numerator, denominator)
    # Assert
    if isinstance(expected, _exc_lookup("float", Exception)):
        assert result == pytest.approx(expected)
    else:
        assert result == expected
    assert isinstance(result, (int, float))


def test_divide_by_zero_raises_expected_exception():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    exc_class = _exc_lookup("CalculatorError", Exception)
    # Act / Assert: Accept either CalculatorError if provided by module or built-in ZeroDivisionError
    with pytest.raises((exc_class, ZeroDivisionError, Exception)):
        Calculator.divide(1, 0)


def _write_expected_history_file(path, lines):
    # Helper to read the file and normalize newlines for assertion
    with open(path, "r", encoding="utf-8") as fh:
        content = fh.read()
    # Normalize
    return content.replace("\r\n", "\n").strip(), "\n".join(lines).strip()


def test_save_history_writes_file_when_user_selects_path(tmp_path, monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    mw = SimpleCalculatorPyQt1.MainWindow()
    expected_lines = ["2 * 3 = 6", "7 / 2 = 3.5", "sum: 9"]
    # Attempt to populate history in common attribute names or widgets
    if hasattr(mw, "history"):
        setattr(mw, "history", expected_lines)
    elif hasattr(mw, "_history"):
        setattr(mw, "_history", expected_lines)
    else:
        # Try common widget names that might hold text
        for attr in ("history_text", "historyBrowser", "historyEdit", "historyView"):
            if hasattr(mw, attr):
                widget = getattr(mw, attr)
                try:
                    widget.setPlainText("\n".join(expected_lines))
                except Exception:
                    try:
                        widget.setText("\n".join(expected_lines))
                    except Exception:
                        pass
                break

    target_file = tmp_path / "history_output.txt"

    # Monkeypatch file dialog to return our target path as if user selected it
    monkeypatch.setattr(
        QFileDialog,
        "getSaveFileName",
        staticmethod(lambda *a, **kw: (str(target_file), ""))
    )

    # Act: attempt different call patterns the save_history implementation may expect
    saved = False
    # Pattern 1: instance method
    if hasattr(mw, "save_history") and callable(getattr(mw, "save_history")):
        mw.save_history()
        saved = target_file.exists()
    # Pattern 2: module-level function that accepts instance
    if not saved and hasattr(SimpleCalculatorPyQt1, "save_history") and callable(SimpleCalculatorPyQt1.save_history):
        try:
            # prefer calling with instance if signature expects it
            sig = inspect.signature(SimpleCalculatorPyQt1.save_history)
            if len(sig.parameters) == 0:
                SimpleCalculatorPyQt1.save_history()
            else:
                SimpleCalculatorPyQt1.save_history(mw)
            saved = target_file.exists()
        except TypeError:
            # fallback to trying to pass the path directly
            try:
                SimpleCalculatorPyQt1.save_history(str(target_file))
                saved = target_file.exists()
            except Exception:
                pass

    # Assert that file was created and contents match expected lines
    assert target_file.exists(), "Expected save_history to create the selected file"
    content, expected = _write_expected_history_file(str(target_file), expected_lines)
    assert content == expected


def test_save_history_does_not_write_when_user_cancels(tmp_path, monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    mw = SimpleCalculatorPyQt1.MainWindow()
    # Ensure there is some history so if save were called it would write something
    if hasattr(mw, "history"):
        setattr(mw, "history", ["should not be written"])
    elif hasattr(mw, "_history"):
        setattr(mw, "_history", ["should not be written"])

    # Monkeypatch file dialog to simulate user cancel (empty path)
    monkeypatch.setattr(
        QFileDialog,
        "getSaveFileName",
        staticmethod(lambda *a, **kw: ("", ""))
    )

    # Use a temp path that would be used if saving occurred
    impossible_target = tmp_path / "should_not_exist.txt"

    # Act: call save action in whichever form exists
    if hasattr(mw, "save_history") and callable(getattr(mw, "save_history")):
        # Should not raise; should simply not create the file when canceled
        mw.save_history()
    elif hasattr(SimpleCalculatorPyQt1, "save_history") and callable(SimpleCalculatorPyQt1.save_history):
        sig = inspect.signature(SimpleCalculatorPyQt1.save_history)
        try:
            if len(sig.parameters) == 0:
                SimpleCalculatorPyQt1.save_history()
            else:
                SimpleCalculatorPyQt1.save_history(mw)
        except Exception:
            # If the module-level save_history insists on a path, pass empty string to simulate cancel
            try:
                SimpleCalculatorPyQt1.save_history("")
            except Exception:
                # ignore; outcome will be validated below
                pass

    # Assert: no file has been created at the expected location
    assert not impossible_target.exists(), "No file should be created when user cancels save dialog"
