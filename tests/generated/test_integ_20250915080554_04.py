
# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]  # behave like a namespace package
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

# Optional Django bootstrap to avoid masking real failures by default.
if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

import os
os.environ.setdefault('QT_QPA_PLATFORM', 'offscreen')
for __qt_root in ['PyQt5','PyQt6','PySide2','PySide6']:
    try:
        import importlib.util as _iu
        if _iu.find_spec(__qt_root) is None:
            raise ImportError
    except Exception:
        pass
# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

import builtins
import inspect
import types

import pytest

try:
    import Calculator
except ImportError:
    pytest.skip("Calculator module is required for these integration tests", allow_module_level=True)

try:
    import SimpleCalculatorPyQt1
except ImportError:
    pytest.skip("SimpleCalculatorPyQt1 (PyQt-based UI) is required for these integration tests", allow_module_level=True)


@pytest.mark.parametrize(
    "func_name,a,b,expected",
    [
        ("add", 2, 3, 5),
        ("subtract", 10, 4, 6),
        ("multiply", -2, 3, -6),
        ("divide", 9, 3, 3),
    ],
)
def test_calculator_basic_operations_return_expected_types_and_values(func_name, a, b, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    func = getattr(Calculator, func_name, None)
    if func is None or not callable(func):
        pytest.skip(f"Calculator.{func_name} is not available")

    # Act
    result = func(a, b)

    # Assert
    assert isinstance(result, (int, float)), "result should be numeric"
    assert result == expected, f"{func_name}({a}, {b}) should be {expected}"


@pytest.mark.parametrize(
    "a,b,expected_exception",
    [
        (1, 0, getattr(Calculator, "CalculatorError", ZeroDivisionError)),
        (5, 0, getattr(Calculator, "CalculatorError", ZeroDivisionError)),
    ],
)
def test_divide_by_zero_raises_expected_exception(a, b, expected_exception):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    divide = getattr(Calculator, "divide", None)
    if divide is None:
        pytest.skip("Calculator.divide is not available")

    # Act / Assert
    with pytest.raises(expected_exception):
        divide(a, b)


def _make_fake_lineedit(text):
    class FakeLineEdit:
        def __init__(self, txt):
            self._text = str(txt)

        def text(self):
            return self._text

        def setText(self, value):
            self._text = str(value)

    return FakeLineEdit(text)


def _make_fake_label():
    class FakeLabel:
        def __init__(self):
            self.last_text = ""

        def setText(self, txt):
            self.last_text = str(txt)

        def text(self):
            return self.last_text

    return FakeLabel()


def _make_fake_listwidget():
    class FakeListWidget:
        def __init__(self):
            self.added = []

        def addItem(self, item):
            # Qt widgets often accept QString or other objects; store string representation
            self.added.append(str(item))

        def count(self):
            return len(self.added)

        def item(self, index):
            return self.added[index]

    return FakeListWidget()


@pytest.mark.parametrize(
    "operator, a_text, b_text, expected_result",
    [
        ("+", "3", "7", "10"),
        ("-", "10", "4", "6"),
        ("*", "6", "7", "42"),
        ("/", "8", "2", "4"),
    ],
)
def test_mainwindow_calculate_updates_result_and_history(monkeypatch, operator, a_text, b_text, expected_result):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Try to obtain the calculate callable from the module or its MainWindow class
    calculate = getattr(SimpleCalculatorPyQt1, "calculate", None)
    if calculate is None and hasattr(SimpleCalculatorPyQt1, "MainWindow"):
        calculate = getattr(SimpleCalculatorPyQt1.MainWindow, "calculate", None)

    if calculate is None or not callable(calculate):
        pytest.skip("No callable 'calculate' found in SimpleCalculatorPyQt1 module or MainWindow class")

    # Create a fake "self" that resembles expected UI components
    fake = types.SimpleNamespace()
    # Common UI attribute names in simple PyQt examples; provide several likely names
    fake.lineEdit = _make_fake_lineedit(a_text)
    fake.lineEdit_2 = _make_fake_lineedit(b_text)
    fake.inputA = fake.lineEdit
    fake.inputB = fake.lineEdit_2

    fake.resultLabel = _make_fake_label()
    fake.label = fake.resultLabel

    fake.historyListWidget = _make_fake_listwidget()
    fake.listWidget = fake.historyListWidget

    # Some implementations use a dropdown or a text field for operator
    class FakeOperator:
        def __init__(self, op):
            self._op = op

        def currentText(self):
            return self._op

        def text(self):
            return self._op

    fake.operatorCombo = FakeOperator(operator)
    fake.operator = fake.operatorCombo

    # Monkeypatch Calculator functions to ensure calculate uses them and to observe integration
    monkeypatch.setattr(Calculator, "add", lambda x, y: x + y, raising=False)
    monkeypatch.setattr(Calculator, "subtract", lambda x, y: x - y, raising=False)
    monkeypatch.setattr(Calculator, "multiply", lambda x, y: x * y, raising=False)
    monkeypatch.setattr(Calculator, "divide", lambda x, y: x / y if float(y) != 0 else (_ for _ in ()).throw(getattr(Calculator, "CalculatorError", ZeroDivisionError())), raising=False)

    # Act
    # Support calculate being either an unbound function or a function descriptor expecting self
    sig = inspect.signature(calculate)
    try:
        if len(sig.parameters) == 0:
            # unlikely, but call directly
            result = calculate()
        else:
            # call with our fake instance as 'self'
            result = calculate(fake)
    except Exception:
        # If calculation raises, fail the test to surface integration issues
        raise

    # Assert: resultLabel or equivalent got updated with expected result
    # Accept that some implementations may return nothing and only update UI; check the label
    possible_texts = []
    if hasattr(fake, "resultLabel"):
        possible_texts.append(fake.resultLabel.text())
    if hasattr(fake, "label"):
        possible_texts.append(fake.label.text())
    # If calculate returned a value, include it
    if result is not None:
        possible_texts.append(str(result))

    assert any(expected_result in txt for txt in possible_texts if txt is not None), (
        "Expected result text not found in any known UI fields: " + repr(possible_texts)
    )

    # And the history widget should have recorded something that includes the numeric result
    history_widget = getattr(fake, "historyListWidget", None) or getattr(fake, "listWidget", None)
    if history_widget is None:
        pytest.skip("No history widget available on MainWindow-like object to assert history behavior")

    # At least one history entry should contain the computed result
    assert any(expected_result in entry for entry in history_widget.added), "History should include the operation result"


def test_mainwindow_calculate_handles_division_by_zero_and_updates_ui(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calculate = getattr(SimpleCalculatorPyQt1, "calculate", None)
    if calculate is None and hasattr(SimpleCalculatorPyQt1, "MainWindow"):
        calculate = getattr(SimpleCalculatorPyQt1.MainWindow, "calculate", None)

    if calculate is None or not callable(calculate):
        pytest.skip("No callable 'calculate' found in SimpleCalculatorPyQt1 module or MainWindow class")

    fake = types.SimpleNamespace()
    fake.lineEdit = _make_fake_lineedit("5")
    fake.lineEdit_2 = _make_fake_lineedit("0")
    fake.resultLabel = _make_fake_label()
    fake.historyListWidget = _make_fake_listwidget()
    fake.operatorCombo = type("O", (), {"currentText": lambda self: "/", "text": lambda self: "/"})()

    # Monkeypatch divide to raise the module's CalculatorError or ZeroDivisionError
    expected_exc_type = getattr(Calculator, "CalculatorError", ZeroDivisionError)
    def raising_div(x, y):
        raise expected_exc_type("division by zero")

    monkeypatch.setattr(Calculator, "divide", raising_div, raising=False)

    # Act
    sig = inspect.signature(calculate)
    try:
        if len(sig.parameters) == 0:
            result = calculate()
        else:
            result = calculate(fake)
    except expected_exc_type:
        # Some implementations may propagate the exception; that's acceptable as handling
        pytest.skip("calculate propagated division-by-zero exception instead of updating UI")
    except Exception:
        # Any other exception is a failure
        raise

    # Assert: UI updated with an error message in resultLabel or history
    label_text = fake.resultLabel.text()
    assert label_text is not None, "resultLabel should contain error or empty text"
    assert ("error" in label_text.lower()) or ("divide" in label_text.lower()) or ("zero" in label_text.lower()) or (fake.historyListWidget.count() > 0), (
        "Expected an error-related message in the UI or an entry in history when dividing by zero"
    )
