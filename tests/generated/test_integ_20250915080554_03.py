
# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]  # behave like a namespace package
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

# Optional Django bootstrap to avoid masking real failures by default.
if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

import os
os.environ.setdefault('QT_QPA_PLATFORM', 'offscreen')
for __qt_root in ['PyQt5','PyQt6','PySide2','PySide6']:
    try:
        import importlib.util as _iu
        if _iu.find_spec(__qt_root) is None:
            raise ImportError
    except Exception:
        pass
# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    import inspect
    import io
    import builtins
    import Calculator as calc_mod
    import SimpleCalculatorPyQt1 as ui_mod
except ImportError:
    import pytest
    pytest.skip("Required modules (Calculator and SimpleCalculatorPyQt1) not available", allow_module_level=True)

CalculatorClass = getattr(calc_mod, 'Calculator', None)
CalcError = getattr(calc_mod, 'CalculatorError', ZeroDivisionError)
add_fn = getattr(calc_mod, 'add', None)
subtract_fn = getattr(calc_mod, 'subtract', None)
multiply_fn = getattr(calc_mod, 'multiply', None)
divide_fn = getattr(calc_mod, 'divide', None)
save_history_fn = getattr(ui_mod, 'save_history', None)
clear_input_fn = getattr(ui_mod, 'clear_input', None)
clear_history_fn = getattr(ui_mod, 'clear_history', None)


@pytest.mark.parametrize(
    "fn_name, a, b, expected",
    [
        ("add", 2, 3, 5),
        ("subtract", 10, 4, 6),
        ("multiply", 7, 6, 42),
        ("divide", 20, 4, 5),
    ],
)
def test_calculator_basic_operations(fn_name, a, b, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    fn = None
    if CalculatorClass is not None:
        inst = CalculatorClass()
        fn = getattr(inst, fn_name, None)
    if fn is None:
        fn = getattr(calc_mod, fn_name, None)
    if fn is None:
        pytest.skip(f"{fn_name} not available in Calculator module")

    # Act
    result = fn(a, b)

    # Assert
    assert isinstance(result, (int, float)), "result should be numeric"
    assert result == expected


def test_divide_by_zero_raises_calculator_error():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    if CalculatorClass is not None:
        inst = CalculatorClass()
        fn = getattr(inst, 'divide', None)
    else:
        fn = getattr(calc_mod, 'divide', None)
    if fn is None:
        pytest.skip("divide not available in Calculator module")

    # Act / Assert
    with pytest.raises(CalcError):
        fn(1, 0)


def test_save_history_writes_to_path(tmp_path, monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    history = ["2 + 3 = 5", "10 / 2 = 5", "7 * 6 = 42"]
    if save_history_fn is None:
        pytest.skip("save_history not available in UI module")

    sig = inspect.signature(save_history_fn)
    file_path = tmp_path / "history.txt"

    # Act
    # If function accepts (history, path) -> call with both.
    # If function accepts only (path) -> arrange calc_mod.history and call with path.
    if len(sig.parameters) >= 2:
        save_history_fn(history, str(file_path))
    elif len(sig.parameters) == 1:
        # try to set a history attribute on the calculator module for the function to pick up
        monkeypatch.setattr(calc_mod, 'history', history, raising=False)
        save_history_fn(str(file_path))
    else:
        pytest.skip("save_history has unexpected signature")

    # Assert
    assert file_path.exists(), "history file should be created"
    content = file_path.read_text(encoding='utf-8')
    for entry in history:
        assert entry in content


def test_clear_input_and_history_with_fake_widgets(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    if clear_input_fn is None and clear_history_fn is None:
        pytest.skip("clear_input and clear_history not available in UI module")

    class FakeLineEdit:
        def __init__(self, text):
            self._text = text

        def setText(self, t):
            self._text = t

        def text(self):
            return self._text

    class FakeListWidget:
        def __init__(self, items):
            self._items = list(items)

        def addItem(self, item):
            self._items.append(item)

        def clear(self):
            self._items.clear()

        def count(self):
            return len(self._items)

        def items(self):
            return list(self._items)

    # Some UI implementations expect a MainWindow-like object with attributes
    class FakeMainWindow:
        def __init__(self, input_widget, history_widget):
            # common attribute names used in many simple UIs
            self.input = input_widget
            self.lineEdit = input_widget
            self.display = input_widget
            self.history = history_widget
            self.listWidget = history_widget
            self.historyWidget = history_widget

    fake_input = FakeLineEdit("123+456")
    fake_history = FakeListWidget(["a", "b", "c"])
    fake_window = FakeMainWindow(fake_input, fake_history)

    # Act & Assert for clear_input
    if clear_input_fn is not None:
        sig_in = inspect.signature(clear_input_fn)
        # try calling with a direct widget if function takes one parameter
        if len(sig_in.parameters) == 1:
            clear_input_fn(fake_input)
            # Assert widget cleared
            assert fake_input.text() == "" or fake_input.text() is None
        elif len(sig_in.parameters) == 0:
            # try calling without args (unlikely) but handle if implemented that way
            clear_input_fn()
            # cannot reliably assert in this branch; ensure no exception
        else:
            # attempt to call with a main window
            clear_input_fn(fake_window)
            assert fake_input.text() == "" or fake_input.text() is None

    # Act & Assert for clear_history
    if clear_history_fn is not None:
        sig_hist = inspect.signature(clear_history_fn)
        if len(sig_hist.parameters) == 1:
            clear_history_fn(fake_history)
            assert fake_history.count() == 0
        elif len(sig_hist.parameters) == 0:
            clear_history_fn()
        else:
            clear_history_fn(fake_window)
            assert fake_history.count() == 0
