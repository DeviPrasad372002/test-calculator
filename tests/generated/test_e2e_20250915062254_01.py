
# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT")
if _target and os.path.isdir(_target):
    if _target not in sys.path: sys.path.insert(0, _target)

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

# Optional Django bootstrap to avoid masking real failures by default.
if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

import os
os.environ.setdefault('QT_QPA_PLATFORM', 'offscreen')
for __qt_root in ['PyQt5','PyQt6','PySide2','PySide6']:
    try:
        import importlib.util as _iu
        if _iu.find_spec(__qt_root) is None:
            raise ImportError
    except Exception:
        pass
# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

import pytest

try:
    import Calculator as calc_module
except ImportError:
    pytest.skip("Calculator module not available, skipping tests", allow_module_level=True)

CalculatorClass = getattr(calc_module, "Calculator", None)
if CalculatorClass is None:
    pytest.skip("Calculator.Calculator class not found, skipping tests", allow_module_level=True)

CalculatorError = getattr(calc_module, "CalculatorError", TypeError)


def test_add_and_subtract_sequence():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = CalculatorClass()

    # Act
    result_add = calc.add(2, 3)
    result_sub = calc.subtract(result_add, 1)

    # Assert
    assert result_add == 5, "add(2,3) should return 5"
    assert result_sub == 4, "subtract(add(2,3),1) should return 4"
    assert isinstance(result_add, (int, float)), "add should return numeric type"
    assert isinstance(result_sub, (int, float)), "subtract should return numeric type"


@pytest.mark.parametrize(
    "a,b",
    [
        (0, 0),            # zeros
        (-1, 1),           # negatives canceling
        (10_000_000, 5),   # large integer
        (3.5, 2.5),        # floats
        (12345678901234567890, 1),  # very large int
    ],
)
def test_add_parametrized_normal_and_edge_cases(a, b):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = CalculatorClass()

    # Act
    result = calc.add(a, b)

    # Assert
    expected = a + b
    assert result == expected, f"add({a!r}, {b!r}) should equal {expected!r}"
    assert isinstance(result, (int, float)), "result should be int or float"


@pytest.mark.parametrize(
    "a,b",
    [
        ("a", 1),    # non-numeric string
        (None, 2),   # None
        ([1], 2),    # list
    ],
)
def test_add_raises_on_invalid_inputs(a, b):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = CalculatorClass()

    # Act / Assert
    with pytest.raises(CalculatorError):
        calc.add(a, b)
