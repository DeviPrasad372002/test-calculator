
# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]  # behave like a namespace package
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

# Optional Django bootstrap to avoid masking real failures by default.
if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

import os
os.environ.setdefault('QT_QPA_PLATFORM', 'offscreen')
for __qt_root in ['PyQt5','PyQt6','PySide2','PySide6']:
    try:
        import importlib.util as _iu
        if _iu.find_spec(__qt_root) is None:
            raise ImportError
    except Exception:
        pass
# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

import pytest

try:
    import Calculator
except ImportError:
    pytest.skip("Calculator module not available", allow_module_level=True)


def test_init_creates_instance_and_exposes_operations():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Act
    calc = Calculator.Calculator()
    # Assert
    # public API methods should exist and be callable
    assert hasattr(calc, "add"), "Calculator missing 'add' method"
    assert callable(getattr(calc, "add"))
    assert hasattr(calc, "subtract"), "Calculator missing 'subtract' method"
    assert callable(getattr(calc, "subtract"))
    # optional operations that are part of public API should at least be present (if implemented)
    if hasattr(calc, "multiply"):
        assert callable(getattr(calc, "multiply"))
    if hasattr(calc, "divide"):
        assert callable(getattr(calc, "divide"))


@pytest.mark.parametrize(
    "a,b,expected_add,expected_subtract",
    [
        (1, 2, 3, -1),                     # simple integers
        (1.5, 2.25, 3.75, -0.75),          # floats
        (-3, 5, 2, -8),                    # negative and positive
        (0, 0, 0, 0),                      # zeros
        (10**18, 10**18, 2 * 10**18, 0),   # very large integers
    ],
)
def test_add_and_subtract_return_expected_values(a, b, expected_add, expected_subtract):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = Calculator.Calculator()
    # Act
    add_result = calc.add(a, b)
    subtract_result = calc.subtract(a, b)
    # Assert: results are numerically equal and of a numeric type
    assert add_result == expected_add
    assert subtract_result == expected_subtract
    assert isinstance(add_result, (int, float))
    assert isinstance(subtract_result, (int, float))


def test_divide_by_zero_raises_calculator_error_or_zero_division():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = Calculator.Calculator()
    # pick exception type exported by module if available, otherwise fall back to ZeroDivisionError
    CalcError = getattr(Calculator, "CalculatorError", ZeroDivisionError)
    # Act / Assert
    # Using a real divide operation to verify proper error handling for the divide-by-zero edge case.
    if not hasattr(calc, "divide"):
        pytest.skip("Calculator.divide not implemented; cannot test divide-by-zero behavior")
    with pytest.raises(CalcError):
        calc.divide(1, 0)
