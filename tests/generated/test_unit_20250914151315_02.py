
# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.exists(_target):
    if _target not in sys.path: sys.path.insert(0, _target)
    try: os.chdir(_target)
    except Exception: pass

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

def _apply_compatibility_fixes():
    try:
        import jinja2
        if not hasattr(jinja2, 'Markup'):
            try:
                from markupsafe import Markup, escape
                jinja2.Markup = Markup
                if not hasattr(jinja2, 'escape'):
                    jinja2.escape = escape
            except Exception:
                pass
    except ImportError:
        pass
    try:
        import collections as _collections, collections.abc as _abc
        for _n in ('Mapping','MutableMapping','Sequence','Iterable','Container',
                   'MutableSequence','Set','MutableSet','Iterator','Generator','Callable','Collection'):
            if not hasattr(_collections, _n) and hasattr(_abc, _n):
                setattr(_collections, _n, getattr(_abc, _n))
    except Exception:
        pass
    try:
        import marshmallow as _mm
        if not hasattr(_mm, "__version__"):
            _mm.__version__ = "4"
    except Exception:
        pass

_apply_compatibility_fixes()

# Minimal, safe Django bootstrap. If anything goes wrong, skip the module (repo-agnostic).
try:
    import django
    from django.conf import settings as _dj_settings
    from django import apps as _dj_apps

    if not _dj_settings.configured:
        _cfg = dict(
            DEBUG=True,
            SECRET_KEY='pytest-secret',
            DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
            INSTALLED_APPS=[
                'django.contrib.auth','django.contrib.contenttypes',
                'django.contrib.sessions','django.contrib.messages'
            ],
            MIDDLEWARE=[
                'django.middleware.security.SecurityMiddleware',
                'django.contrib.sessions.middleware.SessionMiddleware',
                'django.middleware.common.CommonMiddleware',
            ],
            USE_TZ=True, TIME_ZONE='UTC',
        )
        try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
        except Exception: pass
        try: _dj_settings.configure(**_cfg)
        except Exception: pass

    if not _dj_apps.ready:
        try: django.setup()
        except Exception: pass

    # Probe a known Django core that previously crashed on some stacks.
    try:
        import django.contrib.auth.base_user as _dj_probe  # noqa
    except Exception as _e:
        _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
except Exception as _e:
    # Do NOT crash the entire test session – make the module opt-out.
    _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)


for __qt_root in ["PyQt5","PyQt6","PySide2","PySide6"]:
    try:
        import importlib.util as _iu
        if _iu.find_spec(__qt_root) is None:
            raise ImportError
    except Exception:
        pass

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    import inspect
    import builtins
    import Calculator
    import SimpleCalculatorPyQt1
    from unittest import mock
except ImportError:
    import pytest
    pytest.skip("Required test modules not available", allow_module_level=True)


def _exc_lookup(name, fallback=Exception):
    return getattr(Calculator, name, fallback)


@pytest.mark.parametrize(
    "a,b,expected",
    [
        (0, 5, 0),            # zero times positive
        (7, 1, 7),            # identity boundary
        (-3, 6, -18),         # negative times positive
        (2.5, 4, 10.0),       # float * int
        (10**6, 10**6, 10**12)  # large numbers
    ]
)
def test_multiply_various_inputs_returns_expected(a, b, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    func = getattr(Calculator, "multiply", None)
    if func is None or not callable(func):
        pytest.skip("Calculator.multiply not available")
    # Act
    result = func(a, b)
    # Assert
    assert result == expected
    assert isinstance(result, type(expected))


@pytest.mark.parametrize(
    "numerator,denominator,expect_exception,expected_result",
    [
        (10, 2, False, 5),
        (7, 2, False, 3.5),
        (-6, 3, False, -2),
        (5, 0, True, None),     # division by zero -> expect exception
    ]
)
def test_divide_normal_and_zero_division(numerator, denominator, expect_exception, expected_result):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    func = getattr(Calculator, "divide", None)
    if func is None or not callable(func):
        pytest.skip("Calculator.divide not available")
    exception_class = _exc_lookup("CalculatorError", Exception)
    # Act / Assert
    if expect_exception:
        with pytest.raises(_exc_lookup("exception_class", Exception)):
            func(numerator, denominator)
    else:
        result = func(numerator, denominator)
        assert result == expected_result
        # ensure numeric type for non-exception cases
        assert isinstance(result, (int, float))


def _resolve_save_history_callable():
    # Try module-level function first
    if hasattr(SimpleCalculatorPyQt1, "save_history") and callable(SimpleCalculatorPyQt1.save_history):
        return SimpleCalculatorPyQt1.save_history, None
    # Try MainWindow instance method
    MainWindowCls = getattr(SimpleCalculatorPyQt1, "MainWindow", None)
    if MainWindowCls is not None and callable(MainWindowCls):
        try:
            instance = MainWindowCls()
            if hasattr(instance, "save_history") and callable(instance.save_history):
                return instance.save_history, instance
        except Exception:
            # can't construct the MainWindow (likely requires Qt environment) -> treat as not available
            return None, None
    return None, None


def test_save_history_writes_expected_content(tmp_path, monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    save_func, instance = _resolve_save_history_callable()
    if save_func is None:
        pytest.skip("save_history callable not found or MainWindow not constructible")
    # Provide deterministic history either via argument or instance attribute
    history_lines = ["1 + 1 = 2", "π ≈ 3.14159", "Large result: 1000000000000"]
    target_file = str(tmp_path / "history.txt")

    # Prepare a mock for open to capture writes
    m_open = mock.mock_open()
    monkeypatch.setattr(builtins, "open", m_open, raising=False)

    # If bound method uses instance state, set its history attribute
    if instance is not None:
        setattr(instance, "history", history_lines)

    # Act
    # Try a few calling conventions robustly: (path, history), (path,), ()
    called = False
    try:
        save_func(target_file, history_lines)
        called = True
    except TypeError:
        try:
            save_func(target_file)
            called = True
        except TypeError:
            try:
                save_func()
                called = True
            except TypeError:
                pytest.skip("save_history signature not compatible with tested call patterns")

    # Assert
    assert called is True
    # Ensure open was invoked for writing to the target filename
    open_calls = [c for c in m_open.mock_calls if c[0] == "" or c[0] == "().write"]
    # The mock_open's initial call is the file open; check the call args
    assert m_open.call_count >= 1
    # Inspect the first call to open to see the filename and mode
    first_call = m_open.mock_calls[0]
    # mock_open records open(...) as call args in call[1]
    assert target_file in str(first_call[1][0])
    # mode should be writable
    mode = first_call[1][1] if len(first_call[1]) > 1 else "w"
    assert "w" in mode or "x" in mode or "a" in mode

    # Check that the writes include the history lines content
    handle = m_open()
    written = "".join(call.args[0] for call in handle.write.mock_calls)
    for line in history_lines:
        assert line in written


def test_save_history_propagates_io_errors(monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    save_func, instance = _resolve_save_history_callable()
    if save_func is None:
        pytest.skip("save_history callable not found or MainWindow not constructible")
    # Force open to raise an OSError when called
    def raising_open(*args, **kwargs):
        raise OSError("disk not available")
    monkeypatch.setattr(builtins, "open", raising_open, raising=False)

    # If instance exists, ensure it has a history attribute to avoid other errors
    if instance is not None:
        setattr(instance, "history", ["a + b = c"])

    # Act / Assert: expect some exception (OSError or propagated)
    with pytest.raises(_exc_lookup("Exception", Exception)):
        # Try calling with path+history, fallback to path, then no-arg
        tried = False
        try:
            save_func("/nonexistent/path.txt", ["1+1=2"])
            tried = True
        except TypeError:
            try:
                save_func("/nonexistent/path.txt")
                tried = True
            except TypeError:
                save_func()
                tried = True
        assert tried is True
