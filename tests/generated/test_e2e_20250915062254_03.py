
# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT")
if _target and os.path.isdir(_target):
    if _target not in sys.path: sys.path.insert(0, _target)

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

# Optional Django bootstrap to avoid masking real failures by default.
if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

import os
os.environ.setdefault('QT_QPA_PLATFORM', 'offscreen')
for __qt_root in ['PyQt5','PyQt6','PySide2','PySide6']:
    try:
        import importlib.util as _iu
        if _iu.find_spec(__qt_root) is None:
            raise ImportError
    except Exception:
        pass
# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

import inspect
import pytest

try:
    import Calculator
    import SimpleCalculatorPyQt1
except ImportError as e:
    pytest.skip(f"missing required module: {e}", allow_module_level=True)


class _FakeLineEdit:
    """Minimal fake that mimics the small subset of QLineEdit used by the UI helpers."""
    def __init__(self, initial: str = ""):
        self._text = initial

    def text(self):
        return self._text

    def setText(self, s: str):
        self._text = s

    def clear(self):
        self._text = ""


class _FakeHistoryWidget:
    """Minimal fake that mimics a QTextEdit-like history widget (plain text)."""
    def __init__(self, initial: str = ""):
        self._plain = initial

    def toPlainText(self):
        return self._plain

    def setPlainText(self, s: str):
        self._plain = s

    def clear(self):
        self._plain = ""


def test_clear_input_uses_settext_or_clear_method_arrange_act_assert():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    clear_input = getattr(SimpleCalculatorPyQt1, "clear_input", None)
    if clear_input is None:
        pytest.skip("clear_input not provided by SimpleCalculatorPyQt1")

    widget = _FakeLineEdit("12345")
    # Act
    # Call the public API and expect it to clear the fake widget's text.
    # Support both function signatures: clear_input(widget) or clear_input()
    sig = inspect.signature(clear_input)
    if len(sig.parameters) == 0:
        # Some implementations might operate on module-level widgets; try binding into module.
        # Set common attribute names so the function can find them.
        setattr(SimpleCalculatorPyQt1, "line_edit", widget)
        try:
            clear_input()
        finally:
            try:
                delattr(SimpleCalculatorPyQt1, "line_edit")
            except Exception:
                pass
    else:
        clear_input(widget)

    # Assert
    assert widget.text() == "", "clear_input should remove the input text"


def test_clear_history_clears_plain_text_arrange_act_assert():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    clear_history = getattr(SimpleCalculatorPyQt1, "clear_history", None)
    if clear_history is None:
        pytest.skip("clear_history not provided by SimpleCalculatorPyQt1")

    history = _FakeHistoryWidget("previous results")
    # Act
    sig = inspect.signature(clear_history)
    if len(sig.parameters) == 0:
        # Bind into module as above if needed.
        setattr(SimpleCalculatorPyQt1, "history_widget", history)
        try:
            clear_history()
        finally:
            try:
                delattr(SimpleCalculatorPyQt1, "history_widget")
            except Exception:
                pass
    else:
        clear_history(history)

    # Assert
    assert history.toPlainText() == "", "clear_history should remove all history text"


@pytest.mark.parametrize(
    "op_name,a,b,expected,expect_exception",
    [
        ("add", 1, 2, 3, None),
        ("subtract", 5, 3, 2, None),
        ("multiply", 4, 3, 12, None),
        ("divide", 10, 2, 5, None),
        # Error path: division by zero should raise CalculatorError if present, else ZeroDivisionError
        ("divide", 1, 0, None, getattr(Calculator, "CalculatorError", ZeroDivisionError)),
    ],
)
def test_calculator_basic_operations_and_error_paths_arrange_act_assert(op_name, a, b, expected, expect_exception):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Prefer instance methods if Calculator provides a class, else module-level functions.
    op_func = None
    instance = None
    if hasattr(Calculator, "Calculator"):
        # Try to instantiate; if that fails, fall back to module-level functions.
        try:
            instance = Calculator.Calculator()
        except Exception:
            instance = None

    if instance is not None and hasattr(instance, op_name):
        op_func = getattr(instance, op_name)
    elif hasattr(Calculator, op_name):
        op_func = getattr(Calculator, op_name)
    else:
        pytest.skip(f"operation {op_name} not available in Calculator API")

    # Act / Assert
    if expect_exception is not None:
        with pytest.raises(expect_exception):
            op_func(a, b)
    else:
        result = op_func(a, b)
        # Assert - concrete value and reasonable type
        assert result == expected
        assert isinstance(result, (int, float)), "result should be numeric"
