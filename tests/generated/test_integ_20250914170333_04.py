
# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.exists(_target):
    if _target not in sys.path: sys.path.insert(0, _target)
    try: os.chdir(_target)
    except Exception: pass

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

def _apply_compatibility_fixes():
    try:
        import jinja2
        if not hasattr(jinja2, 'Markup'):
            try:
                from markupsafe import Markup, escape
                jinja2.Markup = Markup
                if not hasattr(jinja2, 'escape'):
                    jinja2.escape = escape
            except Exception:
                pass
    except ImportError:
        pass
    try:
        import collections as _collections, collections.abc as _abc
        for _n in ('Mapping','MutableMapping','Sequence','Iterable','Container',
                   'MutableSequence','Set','MutableSet','Iterator','Generator','Callable','Collection'):
            if not hasattr(_collections, _n) and hasattr(_abc, _n):
                setattr(_collections, _n, getattr(_abc, _n))
    except Exception:
        pass
    try:
        import marshmallow as _mm
        if not hasattr(_mm, "__version__"):
            _mm.__version__ = "4"
    except Exception:
        pass

_apply_compatibility_fixes()

# Minimal, safe Django bootstrap. If anything goes wrong, skip the module (repo-agnostic).
try:
    import django
    from django.conf import settings as _dj_settings
    from django import apps as _dj_apps

    if not _dj_settings.configured:
        _cfg = dict(
            DEBUG=True,
            SECRET_KEY='pytest-secret',
            DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
            INSTALLED_APPS=[
                'django.contrib.auth','django.contrib.contenttypes',
                'django.contrib.sessions','django.contrib.messages'
            ],
            MIDDLEWARE=[
                'django.middleware.security.SecurityMiddleware',
                'django.contrib.sessions.middleware.SessionMiddleware',
                'django.middleware.common.CommonMiddleware',
            ],
            USE_TZ=True, TIME_ZONE='UTC',
        )
        try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
        except Exception: pass
        try: _dj_settings.configure(**_cfg)
        except Exception: pass

    if not _dj_apps.ready:
        try: django.setup()
        except Exception: pass

    # Probe a known Django core that previously crashed on some stacks.
    try:
        import django.contrib.auth.base_user as _dj_probe  # noqa
    except Exception as _e:
        _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
except Exception as _e:
    # Do NOT crash the entire test session â€“ make the module opt-out.
    _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)


for __qt_root in ["PyQt5","PyQt6","PySide2","PySide6"]:
    try:
        import importlib.util as _iu
        if _iu.find_spec(__qt_root) is None:
            raise ImportError
    except Exception:
        pass

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

import pytest as _pytest
_pytest.skip('generator: banned private imports detected; skipping module', allow_module_level=True)

try:
    import pytest
    import os
    import builtins
    import Calculator
    import SimpleCalculatorPyQt1
    from unittest import mock
except ImportError:
    import pytest as _pytest
    _pytest.skip("Required test modules not available", allow_module_level=True)

def _exc_lookup(name, default=Exception):
    return getattr(Calculator, name, default)

@pytest.mark.parametrize("a,b,method_name,expected", [
    (2, 3, "add", 5),
    (5, 2, "subtract", 3),
    (4, 2.5, "multiply", 10.0),
    (9, 3, "divide", 3),
])
def test_calculator_basic_operations_parametrized(a, b, method_name, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = Calculator.Calculator()
    method = getattr(calc, method_name)
    # Act
    result = method(a, b)
    # Assert
    assert isinstance(result, (int, float))
    # numeric equality
    assert result == expected

@pytest.mark.parametrize("left_text,right_text,operator,calc_method,calc_return,expected_display", [
    ("2", "3", "+", "add", 5, "5"),
    ("7", "2", "-", "subtract", 5, "5"),
    ("3", "4", "*", "multiply", 12, "12"),
    ("10", "2", "/", "divide", 5, "5"),
])
def test_mainwindow_calculate_calls_calculator_and_updates_display(monkeypatch, left_text, right_text, operator, calc_method, calc_return, expected_display):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Create a MainWindow instance without running its __init__ to avoid GUI requirements
    MainWindow = SimpleCalculatorPyQt1.MainWindow
    mw = object.__new__(MainWindow)

    # Provide a fake line-edit-like object with text() and setText()
    class FakeLineEdit:
        def __init__(self, txt=""):
            self._txt = txt
            self.last_set = None
        def text(self):
            return self._txt
        def setText(self, v):
            self.last_set = v

    # Provide a fake combo-like object with currentText()
    class FakeCombo:
        def __init__(self, txt):
            self._txt = txt
        def currentText(self):
            return self._txt
        def currentIndex(self):
            return 0

    # Provide a fake calculator as a mock to ensure calculate uses it
    fake_calc = mock.MagicMock(spec=Calculator.Calculator)
    getattr(fake_calc, calc_method).return_value = calc_return

    # Populate many possible attribute names that calculate might use
    # so that whichever one MainWindow.calculate expects is present.
    input_attrs = ["lineEdit", "lineEdit_1", "lineEdit_2", "input1", "input2", "num1", "num2", "firstNum", "secondNum"]
    result_attrs = ["lineEdit_3", "result", "display", "output", "lcdNumber"]

    for name in input_attrs:
        setattr(mw, name, FakeLineEdit())
    for name in result_attrs:
        setattr(mw, name, FakeLineEdit())

    # Set likely used attributes to our specific values
    # Many implementations use lineEdit and lineEdit_2 for inputs and lineEdit_3 for result
    mw.lineEdit = FakeLineEdit(left_text)
    mw.lineEdit_2 = FakeLineEdit(right_text)
    mw.lineEdit_3 = FakeLineEdit()  # result target

    # Operator widget possibilities
    mw.comboBox = FakeCombo(operator)
    mw.operator = FakeCombo(operator)
    mw.combo = FakeCombo(operator)

    # Attach our mock calculator
    mw.calculator = fake_calc

    # Act
    # Call calculate; support both method being function or attribute
    calc_fn = getattr(mw, "calculate", None)
    assert callable(calc_fn), "MainWindow.calculate must be present and callable"
    calc_fn()

    # Assert
    # Ensure the underlying calculator method was called with numeric args
    # Accept ints or floats; convert expected to float for comparison in call args
    called = getattr(fake_calc, calc_method).called
    assert called, f"Expected calculator.{calc_method} to be called"

    # Verify display updated: check likely result widgets for last_set matching expected_display
    found = False
    for name in result_attrs + ["lineEdit_3", "result", "display", "output"]:
        widget = getattr(mw, name, None)
        if hasattr(widget, "last_set") and widget.last_set is not None:
            found = True
            # Normalize to string for comparison
            assert str(widget.last_set) == expected_display
            break
    assert found, "No result widget was updated with the calculation result"

def test_save_history_writes_file_and_handles_cancel(tmp_path, monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    MainWindow = SimpleCalculatorPyQt1.MainWindow
    mw = object.__new__(MainWindow)

    # Fake text area that provides toPlainText (common in QTextEdit) and plain text via text()
    class FakeTextArea:
        def __init__(self, txt=""):
            self._txt = txt
        def toPlainText(self):
            return self._txt
        def text(self):
            return self._txt

    history_text = "1 + 1 = 2\n2 * 3 = 6\n"
    mw.txtHistory = FakeTextArea(history_text)

    # Prepare a target file path
    target_file = tmp_path / "history_out.txt"

    # Monkeypatch QFileDialog.getSaveFileName to return a path (simulate user choosing file)
    # Different PyQt versions return tuple or string; support both by returning string path here.
    def fake_get_save_filename(*args, **kwargs):
        return str(target_file)
    # Place the fake into the module namespace used by save_history
    if hasattr(SimpleCalculatorPyQt1, "QFileDialog"):
        monkeypatch.setattr(SimpleCalculatorPyQt1.QFileDialog, "getSaveFileName", fake_get_save_filename, raising=False)
    else:
        # If module lacks QFileDialog attribute, set it on module to allow save_history to call it
        class DummyFD:
            pass
        DummyFD.getSaveFileName = staticmethod(fake_get_save_filename)
        setattr(SimpleCalculatorPyQt1, "QFileDialog", DummyFD)

    # Act
    save_fn = getattr(mw, "save_history", None)
    # Some implementations have save_history as a standalone function; account for that
    if callable(save_fn):
        save_fn()
    else:
        # Try module-level function fallback
        save_func = getattr(SimpleCalculatorPyQt1, "save_history", None)
        assert callable(save_func), "No callable save_history found on MainWindow instance or module"
        # Call with mw context if function expects self; try both possibilities
        try:
            save_func(mw)
        except TypeError:
            save_func()

    # Assert file created and contents match
    assert target_file.exists(), "Expected history file to be created"
    content = target_file.read_text()
    assert history_text == content

    # Now simulate cancel (user closes dialog without selecting file) -> no file should be created or overwritten
    # Reset: provide a different history and have dialog return empty string or tuple with empty
    new_text = "no save\n"
    mw.txtHistory = FakeTextArea(new_text)
    # Return empty to simulate cancel
    def fake_get_save_cancel(*args, **kwargs):
        return ""
    monkeypatch.setattr(SimpleCalculatorPyQt1.QFileDialog, "getSaveFileName", fake_get_save_cancel, raising=False)

    # Act: call save_history again
    if callable(save_fn):
        save_fn()
    else:
        try:
            save_func(mw)
        except TypeError:
            save_func()

    # Assert: file unchanged
    content_after = target_file.read_text()
    assert content_after == history_text, "File should remain unchanged when save dialog is cancelled"
