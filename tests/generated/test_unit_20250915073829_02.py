
# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]  # behave like a namespace package
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

# Optional Django bootstrap to avoid masking real failures by default.
if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

import os
os.environ.setdefault('QT_QPA_PLATFORM', 'offscreen')
for __qt_root in ['PyQt5','PyQt6','PySide2','PySide6']:
    try:
        import importlib.util as _iu
        if _iu.find_spec(__qt_root) is None:
            raise ImportError
    except Exception:
        pass
# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

import builtins
import inspect
from unittest.mock import mock_open, patch

import pytest

try:
    from target import Calculator as calc_mod
    from target import SimpleCalculatorPyQt1 as gui_mod
except ImportError as e:
    pytest.skip(f"Skipping tests because target modules are unavailable: {e}", allow_module_level=True)


def _get_operation(module, name):
    # Arrange: try to find operation as module-level function first, then as Calculator instance method
    if hasattr(module, name) and callable(getattr(module, name)):
        return getattr(module, name)
    if hasattr(module, "Calculator"):
        Calculator = getattr(module, "Calculator")
        # prefer instance method if possible
        if hasattr(Calculator, name):
            member = getattr(Calculator, name)
            if callable(member):
                try:
                    instance = Calculator()
                except Exception:
                    # fall back to the raw attribute (could be @staticmethod or classmethod)
                    return member
                return getattr(instance, name)
    raise AttributeError(f"Operation {name} not found in module {module.__name__}")


@pytest.mark.parametrize(
    "a,b,expected",
    [
        (2, 3, 6),
        (0, 5, 0),
        (-4, 6, -24),
        (1.5, 2, 3.0),
    ],
)
def test_multiply_various_inputs(a, b, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    multiply = _get_operation(calc_mod, "multiply")

    # Act
    result = multiply(a, b)

    # Assert
    if isinstance(expected, float):
        assert result == pytest.approx(expected)
    else:
        assert result == expected
    assert isinstance(result, (int, float))


def test_multiply_large_numbers_and_commutativity():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    multiply = _get_operation(calc_mod, "multiply")
    a = 10**6
    b = 10**6

    # Act
    res1 = multiply(a, b)
    res2 = multiply(b, a)

    # Assert
    assert res1 == res2
    assert res1 == a * b


@pytest.mark.parametrize(
    "numerator,denominator,expected",
    [
        (10, 2, 5),
        (7, -2, -3.5),
        (0, 5, 0),
        (5.0, 2, 2.5),
    ],
)
def test_divide_normal_cases(numerator, denominator, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    divide = _get_operation(calc_mod, "divide")

    # Act
    result = divide(numerator, denominator)

    # Assert
    if isinstance(expected, float):
        assert result == pytest.approx(expected)
    else:
        assert result == expected
    assert isinstance(result, (int, float))


def test_divide_by_zero_raises_defined_error():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    divide = _get_operation(calc_mod, "divide")
    # If the module defines a CalculatorError prefer it, otherwise fall back to ZeroDivisionError
    CalculatorError = getattr(calc_mod, "CalculatorError", ZeroDivisionError)

    # Act / Assert
    with pytest.raises(CalculatorError):
        divide(1, 0)


def test_save_history_writes_expected_content(tmp_path, monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    expected_content = "LINE_ONE\nLINE_TWO"
    file_path = tmp_path / "history.txt"

    # Prepare a mock open to capture what is written
    m_open = mock_open()
    monkeypatch.setattr(builtins, "open", m_open)

    # Prefer a module-level save_history(history_text, path) if present
    if hasattr(gui_mod, "save_history") and callable(getattr(gui_mod, "save_history")):
        save_fn = getattr(gui_mod, "save_history")
        sig = inspect.signature(save_fn)
        params = list(sig.parameters.values())

        # Act: try several plausible call patterns
        if len(params) == 2:
            # save_history(history_text, path)
            save_fn(expected_content, str(file_path))
        elif len(params) == 1:
            # Could be save_history(path) and expect an instance; try direct call with path
            try:
                save_fn(str(file_path))
            except TypeError:
                # Try treating it as an unbound function meant to be used as method on MainWindow
                if hasattr(gui_mod, "MainWindow"):
                    mw_cls = getattr(gui_mod, "MainWindow")
                    # Create a bare instance without running __init__
                    instance = object.__new__(mw_cls)
                    # Attach several plausible attribute names that the method might read from
                    class DummyHistory:
                        def toPlainText(self):
                            return expected_content

                        def text(self):
                            return expected_content

                    dummy = DummyHistory()
                    for name in ("history", "historyText", "historyTextEdit", "history_text"):
                        try:
                            setattr(instance, name, dummy)
                        except Exception:
                            pass
                    # Call the method as if bound
                    gui_mod.MainWindow.save_history(instance, str(file_path))
                else:
                    raise
        else:
            # Unexpected signature: attempt to call with (instance, path) if MainWindow exists
            if hasattr(gui_mod, "MainWindow"):
                mw_cls = getattr(gui_mod, "MainWindow")
                instance = object.__new__(mw_cls)
                class DummyHistory:
                    def toPlainText(self):
                        return expected_content

                    def text(self):
                        return expected_content

                dummy = DummyHistory()
                for name in ("history", "historyText", "historyTextEdit", "history_text"):
                    try:
                        setattr(instance, name, dummy)
                    except Exception:
                        pass
                save_fn(instance, str(file_path))
            else:
                pytest.skip("Cannot determine how to call save_history in module", allow_module_level=False)
    elif hasattr(gui_mod, "MainWindow") and hasattr(getattr(gui_mod, "MainWindow"), "save_history"):
        # Act: call MainWindow.save_history with a crafted instance
        mw_cls = getattr(gui_mod, "MainWindow")
        instance = object.__new__(mw_cls)

        class DummyHistory:
            def toPlainText(self):
                return expected_content

            def text(self):
                return expected_content

        dummy = DummyHistory()
        for name in ("history", "historyText", "historyTextEdit", "history_text"):
            try:
                setattr(instance, name, dummy)
            except Exception:
                pass

        # Call the method
        gui_mod.MainWindow.save_history(instance, str(file_path))
    else:
        pytest.skip("No save_history function or MainWindow.save_history found", allow_module_level=False)

    # Assert: collect the writes and ensure expected content was written
    handle = m_open()
    written = ""
    if handle.write.call_count:
        written = "".join(call.args[0] for call in handle.write.call_args_list if call.args)
    else:
        # In some implementations they use writelines
        if handle.writelines.call_count:
            written = "".join(call.args[0] for call in handle.writelines.call_args_list if call.args)

    assert expected_content in written, f"Expected history content to be in file writes; got: {written}"
