
# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]  # behave like a namespace package
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

# Optional Django bootstrap to avoid masking real failures by default.
if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

import os
os.environ.setdefault('QT_QPA_PLATFORM', 'offscreen')
for __qt_root in ['PyQt5','PyQt6','PySide2','PySide6']:
    try:
        import importlib.util as _iu
        if _iu.find_spec(__qt_root) is None:
            raise ImportError
    except Exception:
        pass
# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

try:
    import pytest
    from target import Calculator as calc_mod
except ImportError:
    import pytest
    pytest.skip("target.Calculator module not available", allow_module_level=True)

Calculator = getattr(calc_mod, "Calculator")
CalculatorError = getattr(calc_mod, "CalculatorError", TypeError)


def test_constructor_and_method_presence():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Act
    calc = Calculator()
    # Assert
    assert isinstance(calc, Calculator)
    assert hasattr(calc, "add") and callable(getattr(calc, "add"))
    assert hasattr(calc, "subtract") and callable(getattr(calc, "subtract"))


import math
import inspect

@pytest.mark.parametrize(
    "a,b,expected",
    [
        (1, 2, 3),
        (1.5, 2.25, 3.75),
        (-3, 7, 4),
    ],
)
def test_add_various_numeric_inputs(a, b, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = Calculator()
    # Act
    result = calc.add(a, b)
    # Assert: concrete type and value
    assert isinstance(result, (int, float))
    # Use math.isclose for float comparisons
    if isinstance(expected, float) or isinstance(result, float):
        assert math.isclose(result, expected, rel_tol=1e-9, abs_tol=0.0)
    else:
        assert result == expected


@pytest.mark.parametrize(
    "a,b,expected",
    [
        (5, 3, 2),
        (0, 0, 0),
        (-1, -2, 1),
    ],
)
def test_subtract_various_numeric_inputs(a, b, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = Calculator()
    # Act
    result = calc.subtract(a, b)
    # Assert: concrete type and value
    assert isinstance(result, (int, float))
    assert result == expected


def test_add_raises_on_invalid_input():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = Calculator()
    # Act / Assert: expect CalculatorError or TypeError on invalid input types
    with pytest.raises(CalculatorError):
        calc.add("not-a-number", 1)


def test_history_updated_after_operations_if_supported():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = Calculator()
    if not hasattr(calc, "history"):
        pytest.skip("Calculator.history not implemented")
    history_attr = getattr(calc, "history")
    assert isinstance(history_attr, list)
    initial_len = len(history_attr)
    # Act
    res = calc.add(10, 20)
    # Assert
    assert len(calc.history) == initial_len + 1
    # The most recent history entry should reflect the operation result or contain the result
    last = calc.history[-1]
    # Accept either raw result stored or a record containing the result attribute/value
    if isinstance(last, (int, float)):
        assert last == res
    elif isinstance(last, dict):
        # common pattern is {'operation': 'add', 'result': res}
        assert "result" in last and last["result"] == res
    else:
        # try attribute access
        if hasattr(last, "result"):
            assert getattr(last, "result") == res
        else:
            pytest.fail("history entry does not contain the operation result")
