
# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]  # behave like a namespace package
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

# Optional Django bootstrap to avoid masking real failures by default.
if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

import os
os.environ.setdefault('QT_QPA_PLATFORM', 'offscreen')
for __qt_root in ['PyQt5','PyQt6','PySide2','PySide6']:
    try:
        import importlib.util as _iu
        if _iu.find_spec(__qt_root) is None:
            raise ImportError
    except Exception:
        pass
# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

import pytest as _pytest
_pytest.skip('generator: banned private imports detected; skipping module', allow_module_level=True)

try:
    import pytest
    import inspect
    import builtins
    import os
    import Calculator
    import SimpleCalculatorPyQt1
    from PyQt5 import QtWidgets
except ImportError as e:
    import pytest as _pytest
    _pytest.skip("Skipping tests because required dependency is missing: " + str(e), allow_module_level=True)


def test_calculator_multiply_and_divide_normal_and_error_paths():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc_cls = getattr(Calculator, "Calculator", None)
    assert callable(calc_cls), "Calculator class not found in Calculator module"
    calc = calc_cls()

    # Act & Assert - multiply normal cases
    multiply_cases = [
        (2, 3, 6),
        (-1, 5, -5),
        (0, 10, 0),
        (123456, 789, 123456 * 789),
    ]
    for a, b, expected in multiply_cases:
        result = calc.multiply(a, b)
        assert result == expected, f"multiply({a}, {b}) expected {expected}, got {result}"
        assert isinstance(result, (int, float)), "multiply should return numeric type"

    # Act & Assert - divide normal cases
    divide_cases = [
        (6, 3, 2.0),
        (7, 2, 3.5),
        (-10, 2, -5.0),
    ]
    for a, b, expected in divide_cases:
        result = calc.divide(a, b)
        assert result == expected, f"divide({a}, {b}) expected {expected}, got {result}"
        assert isinstance(result, (int, float)), "divide should return numeric type"

    # Error path - division by zero should raise a known exception
    expected_exc = getattr(Calculator, 'CalculatorError', ZeroDivisionError)
    with pytest.raises(expected_exc):
        calc.divide(1, 0)


def test_save_history_writes_file_and_handles_io_errors(tmp_path, monkeypatch):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange - ensure a QApplication exists for MainWindow construction
    app = QtWidgets.QApplication.instance() or QtWidgets.QApplication([])

    MainWindow = getattr(SimpleCalculatorPyQt1, "MainWindow", None)
    assert MainWindow is not None and callable(MainWindow), "MainWindow class not found"

    main = MainWindow()

    # Try to locate Calculator instance on the MainWindow
    calc_obj = None
    for v in vars(main).values():
        if isinstance(v, getattr(Calculator, "Calculator")):
            calc_obj = v
            break
    if calc_obj is None:
        # common attribute names fallback
        for name in ("calculator", "calc"):
            candidate = getattr(main, name, None)
            if isinstance(candidate, getattr(Calculator, "Calculator")):
                calc_obj = candidate
                break

    assert calc_obj is not None, "MainWindow does not expose a Calculator instance"

    # Prepare sample history
    sample_history = ["2 * 3 = 6", "7 / 2 = 3.5"]
    # Place history on both calculator and main window to increase chance save_history reads it
    setattr(calc_obj, "history", list(sample_history))
    setattr(main, "history", list(sample_history))

    # Find save_history callable (method or module-level function)
    save_fn = getattr(main, "save_history", None) or getattr(SimpleCalculatorPyQt1, "save_history", None)
    assert callable(save_fn), "save_history function/method not found"

    target_file = tmp_path / "history.txt"

    # Ensure QFileDialog.getSaveFileName returns our target path if the save function uses it
    monkeypatch.setattr(QtWidgets.QFileDialog, "getSaveFileName", lambda *a, **k: (str(target_file), ""))

    # Act - attempt to save; support both signatures: save_history(path) or save_history()
    sig = inspect.signature(save_fn)
    try:
        if len(sig.parameters) == 0:
            # likely bound method that will use QFileDialog
            save_fn()
        else:
            # try to pass filename; if it fails, fallback to no-arg call
            try:
                save_fn(str(target_file))
            except TypeError:
                save_fn()
    except Exception as e:
        pytest.fail(f"save_history raised unexpectedly during normal write: {e}")

    # Assert - file created and contains sample history
    assert target_file.exists(), "History file was not created"
    content = target_file.read_text(encoding="utf-8")
    for line in sample_history:
        assert line in content, f"Expected history line '{line}' not found in saved file"

    # Error path - simulate I/O error during write by monkeypatching builtins.open
    original_open = builtins.open

    def fake_open(*args, **kwargs):
        raise OSError("simulated disk error")

    monkeypatch.setattr(builtins, "open", fake_open)

    prev_content = target_file.read_text(encoding="utf-8") if target_file.exists() else None

    # Attempt save again; some implementations may propagate the OSError, others may catch it.
    raised = False
    try:
        # Respect signature as before
        if len(sig.parameters) == 0:
            save_fn()
        else:
            try:
                save_fn(str(target_file))
            except TypeError:
                save_fn()
    except OSError:
        raised = True
    finally:
        # restore open for cleanliness (monkeypatch will restore automatically at test end, but ensure here)
        monkeypatch.setattr(builtins, "open", original_open)

    # Assert that either an OSError was raised or the file content remained unchanged (no partial/corrupt write)
    if raised:
        assert raised is True
    else:
        if prev_content is None:
            # If no previous content, file should not have been created
            assert not target_file.exists()
        else:
            assert target_file.exists()
            assert target_file.read_text(encoding="utf-8") == prev_content, "File content changed despite simulated I/O error"
