
# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]  # behave like a namespace package
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

# Optional Django bootstrap to avoid masking real failures by default.
if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

import os
os.environ.setdefault('QT_QPA_PLATFORM', 'offscreen')
for __qt_root in ['PyQt5','PyQt6','PySide2','PySide6']:
    try:
        import importlib.util as _iu
        if _iu.find_spec(__qt_root) is None:
            raise ImportError
    except Exception:
        pass
# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

import importlib
import pytest

# Import the target module
calc_mod = importlib.import_module("Calculator")

Calculator = getattr(calc_mod, "Calculator")
CalculatorError = getattr(calc_mod, "CalculatorError", ZeroDivisionError)


@pytest.mark.parametrize(
    "method_name,a,b,expected",
    [
        ("add", 1, 2, 3),
        ("add", 1.5, 2.25, pytest.approx(3.75)),
        ("subtract", 5, 3, 2),
        ("subtract", -1, -2, 1),
        ("multiply", 2, 3, 6),
        ("multiply", 2.5, 4, pytest.approx(10.0)),
        ("divide", 7, 2, pytest.approx(3.5)),
        ("divide", 10, 5, 2),
    ],
)
def test_calculator_basic_operations(method_name, a, b, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = Calculator()

    # Act
    method = getattr(calc, method_name)
    result = method(a, b)

    # Assert
    # numeric results: either exact or approx depending on test param
    if isinstance(expected, float) or isinstance(expected, pytest.approx):
        assert result == expected
    else:
        assert result == expected
    assert isinstance(result, (int, float))


def test_calculator_divide_by_zero_raises():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = Calculator()

    # Act / Assert
    with pytest.raises(CalculatorError):
        calc.divide(1, 0)


def test_calculator_operations_are_stateless_between_calls():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = Calculator()

    # Act
    result1 = calc.add(1, 2)         # expected 3
    result2 = calc.multiply(3, 4)    # expected 12
    result3 = calc.subtract(10, 5)   # expected 5
    result4 = calc.divide(9, 3)      # expected 3

    # Assert
    assert result1 == 3
    assert result2 == 12
    assert result3 == 5
    assert result4 == 3
    # Ensure earlier results did not affect later computations
    assert calc.add(result1, result2) == 15
    assert calc.multiply(result3, result4) == 15
