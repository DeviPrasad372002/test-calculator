
# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT")
if _target and os.path.isdir(_target):
    if _target not in sys.path: sys.path.insert(0, _target)

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

# Optional Django bootstrap to avoid masking real failures by default.
if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

import os
os.environ.setdefault('QT_QPA_PLATFORM', 'offscreen')
for __qt_root in ['PyQt5','PyQt6','PySide2','PySide6']:
    try:
        import importlib.util as _iu
        if _iu.find_spec(__qt_root) is None:
            raise ImportError
    except Exception:
        pass
# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

import pytest

# Guard third-party imports used by the project; if missing, skip the whole test module.
try:
    import PyQt5  # presence only check; actual GUI tests are not required below
except Exception:
    pytest.skip("PyQt5 not available, skipping tests", allow_module_level=True)

# Import the Calculator module under test.
try:
    import Calculator as calc_mod
except Exception:
    pytest.skip("Calculator module import failed, skipping tests", allow_module_level=True)


@pytest.mark.parametrize(
    "func_name,a,b,expected",
    [
        ("add", 1, 2, 3),
        ("subtract", 5, 3, 2),
        ("multiply", -2, 4, -8),
        ("divide", 7, 2, 3.5),
    ],
)
def test_calculator_functions_basic_and_types(func_name, a, b, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Attempt to find a module-level function first; fall back to Calculator instance method.
    func = getattr(calc_mod, func_name, None)
    instance = None
    if not callable(func):
        CalculatorClass = getattr(calc_mod, "Calculator", None)
        if CalculatorClass is None:
            pytest.skip(f"Neither function '{func_name}' nor Calculator class found in module")
        instance = CalculatorClass()
        func = getattr(instance, func_name, None)
        if not callable(func):
            pytest.skip(f"No callable '{func_name}' found on Calculator instance")

    # Act
    result = func(a, b)

    # Assert
    assert isinstance(result, (int, float)), "Result should be numeric"
    # exact equality is fine for these small integers/floats
    assert result == expected


def test_divide_by_zero_raises_calculatorerror():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Prefer module-level divide, fallback to instance method.
    divide = getattr(calc_mod, "divide", None)
    instance = None
    if not callable(divide):
        CalculatorClass = getattr(calc_mod, "Calculator", None)
        if CalculatorClass is None:
            pytest.skip("No divide function and no Calculator class available to test divide-by-zero")
        instance = CalculatorClass()
        divide = getattr(instance, "divide", None)
        if not callable(divide):
            pytest.skip("No divide callable available on Calculator instance")

    # Choose the expected exception: CalculatorError if present, otherwise ZeroDivisionError
    ExpectedError = getattr(calc_mod, "CalculatorError", ZeroDivisionError)

    # Act / Assert
    with pytest.raises(ExpectedError):
        divide(1, 0)


def test_calculator_class_initialization_and_history_behavior(tmp_path):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    CalculatorClass = getattr(calc_mod, "Calculator", None)
    if CalculatorClass is None:
        pytest.skip("Calculator class not present; skipping class-behavior test")

    # Create an instance (Arrange)
    calc = CalculatorClass()

    # Assert initial type and state
    assert isinstance(calc, CalculatorClass)
    # If a history attribute is present, it should be a list or behave like a sequence
    has_history = hasattr(calc, "history")
    if has_history:
        hist = getattr(calc, "history")
        assert hasattr(hist, "__len__"), "history should be a sequence-like object"
        initial_len = len(hist)
    else:
        initial_len = None

    # Act: perform an operation using an instance method if available, else use module function
    op_name = "add"
    op = getattr(calc, op_name, None)
    if not callable(op):
        op = getattr(calc_mod, op_name, None)
        if not callable(op):
            pytest.skip("No add operation available on Calculator class or module")

    result = op(2, 3)  # Act

    # Assert result correctness
    assert result == 5

    # If history exists, verify it was updated in a reasonable way (contains the operands and result)
    if has_history:
        new_len = len(calc.history)
        assert new_len >= initial_len + 1, "Performing an operation should append to history"
        # Look for a recent entry that mentions the operands and result
        recent_entries = list(calc.history)[-5:]  # check last few entries if present
        found = any(("2" in str(e) and "3" in str(e) and "5" in str(e)) for e in recent_entries)
        assert found, "History entries should include a record that mentions the operands and result"
