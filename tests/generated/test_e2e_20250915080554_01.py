
# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]  # behave like a namespace package
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

# Optional Django bootstrap to avoid masking real failures by default.
if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

import os
os.environ.setdefault('QT_QPA_PLATFORM', 'offscreen')
for __qt_root in ['PyQt5','PyQt6','PySide2','PySide6']:
    try:
        import importlib.util as _iu
        if _iu.find_spec(__qt_root) is None:
            raise ImportError
    except Exception:
        pass
# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

import pytest

try:
    import Calculator
except Exception:
    pytest.skip("Calculator module not available", allow_module_level=True)

CalcClass = getattr(Calculator, "Calculator", None)
if CalcClass is None:
    pytest.skip("Calculator.Calculator class not found", allow_module_level=True)


@pytest.mark.parametrize(
    "a,b,expected",
    [
        (1, 2, 3),
        (1.5, 2.3, 3.8),
        (-1, 1, 0),
        (0, 0, 0),
        (10**6, 10**6, 2 * 10**6),
    ],
)
def test_add_returns_correct_numeric_results(a, b, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = CalcClass()

    # Act
    result = calc.add(a, b)

    # Assert
    # allow for float rounding where appropriate
    if isinstance(expected, float):
        assert isinstance(result, float)
        assert result == pytest.approx(expected)
    else:
        assert result == expected
        assert isinstance(result, (int, float))


@pytest.mark.parametrize(
    "a,b,expected",
    [
        (5, 2, 3),
        (2.5, 1.5, 1.0),
        (-1, -1, 0),
        (0, 5, -5),
        (10**6, 1, 10**6 - 1),
    ],
)
def test_subtract_returns_correct_numeric_results(a, b, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = CalcClass()

    # Act
    result = calc.subtract(a, b)

    # Assert
    if isinstance(expected, float):
        assert isinstance(result, float)
        assert result == pytest.approx(expected)
    else:
        assert result == expected
        assert isinstance(result, (int, float))


@pytest.mark.parametrize(
    "method_name, bad_args",
    [
        ("add", ("a", 1)),
        ("add", (None, 2)),
        ("add", ([1, 2], 3)),
        ("subtract", ("x", "y")),
        ("subtract", ([], {})),
    ],
)
def test_add_subtract_with_invalid_types_raise_consistent_exception(method_name, bad_args):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = CalcClass()
    exc_type = getattr(Calculator, "CalculatorError", TypeError)

    # Act / Assert
    method = getattr(calc, method_name)
    with pytest.raises(exc_type):
        method(*bad_args)
