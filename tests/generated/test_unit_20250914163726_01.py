
# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.exists(_target):
    if _target not in sys.path: sys.path.insert(0, _target)
    try: os.chdir(_target)
    except Exception: pass

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

def _apply_compatibility_fixes():
    try:
        import jinja2
        if not hasattr(jinja2, 'Markup'):
            try:
                from markupsafe import Markup, escape
                jinja2.Markup = Markup
                if not hasattr(jinja2, 'escape'):
                    jinja2.escape = escape
            except Exception:
                pass
    except ImportError:
        pass
    try:
        import collections as _collections, collections.abc as _abc
        for _n in ('Mapping','MutableMapping','Sequence','Iterable','Container',
                   'MutableSequence','Set','MutableSet','Iterator','Generator','Callable','Collection'):
            if not hasattr(_collections, _n) and hasattr(_abc, _n):
                setattr(_collections, _n, getattr(_abc, _n))
    except Exception:
        pass
    try:
        import marshmallow as _mm
        if not hasattr(_mm, "__version__"):
            _mm.__version__ = "4"
    except Exception:
        pass

_apply_compatibility_fixes()

# Minimal, safe Django bootstrap. If anything goes wrong, skip the module (repo-agnostic).
try:
    import django
    from django.conf import settings as _dj_settings
    from django import apps as _dj_apps

    if not _dj_settings.configured:
        _cfg = dict(
            DEBUG=True,
            SECRET_KEY='pytest-secret',
            DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
            INSTALLED_APPS=[
                'django.contrib.auth','django.contrib.contenttypes',
                'django.contrib.sessions','django.contrib.messages'
            ],
            MIDDLEWARE=[
                'django.middleware.security.SecurityMiddleware',
                'django.contrib.sessions.middleware.SessionMiddleware',
                'django.middleware.common.CommonMiddleware',
            ],
            USE_TZ=True, TIME_ZONE='UTC',
        )
        try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
        except Exception: pass
        try: _dj_settings.configure(**_cfg)
        except Exception: pass

    if not _dj_apps.ready:
        try: django.setup()
        except Exception: pass

    # Probe a known Django core that previously crashed on some stacks.
    try:
        import django.contrib.auth.base_user as _dj_probe  # noqa
    except Exception as _e:
        _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
except Exception as _e:
    # Do NOT crash the entire test session â€“ make the module opt-out.
    _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)


for __qt_root in ["PyQt5","PyQt6","PySide2","PySide6"]:
    try:
        import importlib.util as _iu
        if _iu.find_spec(__qt_root) is None:
            raise ImportError
    except Exception:
        pass

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

import pytest as _pytest
_pytest.skip('generator: banned private imports detected; skipping module', allow_module_level=True)

try:
    import pytest
    import Calculator
    from unittest import mock
except ImportError as e:
    import pytest as _pytest
    _pytest.skip(f"Missing dependency for tests: {e}", allow_module_level=True)

def _exc_lookup(mod, name, default=Exception):
    # Lookup an exception by name on the provided module; fall back to default
    return getattr(mod, name, default)

def _assert_numeric_equal(result, expected):
    # Helper to assert numeric equality with tolerance for floats
    if isinstance(expected, _exc_lookup("float", Exception)):
        assert result == pytest.approx(expected)
    else:
        assert result == expected

def test___init___creates_calculator_with_expected_api_and_no_unexpected_state_mutation():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Act
    calc = Calculator.Calculator()
    # Assert - instance type and public API surface
    assert isinstance(calc, _exc_lookup("Calculator.Calculator", Exception))
    # Public methods expected to exist
    for name in ("add", "subtract", "multiply", "divide"):
        assert hasattr(calc, name), f"Calculator missing expected method: {name}"
        assert callable(getattr(calc, name))
    # Ensure construction does not create an excessive mutable state by accident:
    # capture the attribute names and shallow values
    initial_attrs = set(vars(calc).keys())
    # further assert __init__ created at least the object state (may be empty)
    assert isinstance(initial_attrs, _exc_lookup("set", Exception))

import math

@pytest.mark.parametrize(
    "a,b,expected",
    [
        (1, 2, 3),
        (0, 0, 0),
        (-1, 1, 0),
        (1.5, 2.25, 3.75),
        (10**18, 10**18, 2 * 10**18),
        (3, -2, 1),
    ],
)
def test_add_returns_correct_numeric_results_and_types(a, b, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = Calculator.Calculator()
    # Act
    result = calc.add(a, b)
    # Assert - value correctness
    _assert_numeric_equal(result, expected)
    # Assert - type expectations: ints remain ints when possible, floats produce floats
    if isinstance(a, _exc_lookup("int", Exception)) and isinstance(b, _exc_lookup("int", Exception)):
        assert isinstance(result, _exc_lookup("int", Exception))
    else:
        assert isinstance(result, (float, int))
    # Idempotence check: calling again yields same result
    assert calc.add(a, b) == result

@pytest.mark.parametrize(
    "a,b,expected",
    [
        (5, 2, 3),
        (0, 0, 0),
        (-1, -1, 0),
        (2.5, 1.25, 1.25),
        (10**12 + 3, 3, 10**12),
    ],
)
def test_subtract_returns_expected_results(a, b, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = Calculator.Calculator()
    # Act
    result = calc.subtract(a, b)
    # Assert - correctness with tolerance for floats
    _assert_numeric_equal(result, expected)
    # Repeatability check
    assert calc.subtract(a, b) == result

def test_add_and_subtract_do_not_mutate_instance_state_unexpectedly():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = Calculator.Calculator()
    before = dict(vars(calc))  # shallow copy of instance dict
    # Act
    _ = calc.add(1, 2)
    _ = calc.subtract(5, 3)
    # Assert - no new attributes introduced by arithmetic operations (only allowed if init provided)
    after = dict(vars(calc))
    assert before == after, "add/subtract should not mutate Calculator instance attributes"

def test_add_rejects_non_numeric_types_and_raises_type_error():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = Calculator.Calculator()
    bad_inputs = [
        ("a", 1),
        (1, "b"),
        (None, 2),
        ([1,2], 3),
        ({}, 0),
    ]
    # Act / Assert
    for a, b in bad_inputs:
        with pytest.raises(_exc_lookup("TypeError", Exception)):
            calc.add(a, b)
