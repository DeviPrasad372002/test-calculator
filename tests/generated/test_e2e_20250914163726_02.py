
# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.exists(_target):
    if _target not in sys.path: sys.path.insert(0, _target)
    try: os.chdir(_target)
    except Exception: pass

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

def _apply_compatibility_fixes():
    try:
        import jinja2
        if not hasattr(jinja2, 'Markup'):
            try:
                from markupsafe import Markup, escape
                jinja2.Markup = Markup
                if not hasattr(jinja2, 'escape'):
                    jinja2.escape = escape
            except Exception:
                pass
    except ImportError:
        pass
    try:
        import collections as _collections, collections.abc as _abc
        for _n in ('Mapping','MutableMapping','Sequence','Iterable','Container',
                   'MutableSequence','Set','MutableSet','Iterator','Generator','Callable','Collection'):
            if not hasattr(_collections, _n) and hasattr(_abc, _n):
                setattr(_collections, _n, getattr(_abc, _n))
    except Exception:
        pass
    try:
        import marshmallow as _mm
        if not hasattr(_mm, "__version__"):
            _mm.__version__ = "4"
    except Exception:
        pass

_apply_compatibility_fixes()

# Minimal, safe Django bootstrap. If anything goes wrong, skip the module (repo-agnostic).
try:
    import django
    from django.conf import settings as _dj_settings
    from django import apps as _dj_apps

    if not _dj_settings.configured:
        _cfg = dict(
            DEBUG=True,
            SECRET_KEY='pytest-secret',
            DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
            INSTALLED_APPS=[
                'django.contrib.auth','django.contrib.contenttypes',
                'django.contrib.sessions','django.contrib.messages'
            ],
            MIDDLEWARE=[
                'django.middleware.security.SecurityMiddleware',
                'django.contrib.sessions.middleware.SessionMiddleware',
                'django.middleware.common.CommonMiddleware',
            ],
            USE_TZ=True, TIME_ZONE='UTC',
        )
        try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
        except Exception: pass
        try: _dj_settings.configure(**_cfg)
        except Exception: pass

    if not _dj_apps.ready:
        try: django.setup()
        except Exception: pass

    # Probe a known Django core that previously crashed on some stacks.
    try:
        import django.contrib.auth.base_user as _dj_probe  # noqa
    except Exception as _e:
        _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
except Exception as _e:
    # Do NOT crash the entire test session â€“ make the module opt-out.
    _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)


for __qt_root in ["PyQt5","PyQt6","PySide2","PySide6"]:
    try:
        import importlib.util as _iu
        if _iu.find_spec(__qt_root) is None:
            raise ImportError
    except Exception:
        pass

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

import pytest as _pytest
_pytest.skip('generator: banned private imports detected; skipping module', allow_module_level=True)

try:
    import pytest
    import Calculator
    import SimpleCalculatorPyQt1
except ImportError:
    import pytest as _pytest
    _pytest.skip("Required modules (Calculator, SimpleCalculatorPyQt1 or pytest) not available", allow_module_level=True)

def _exc_lookup(name, fallback=Exception):
    # Look for an exception class in the Calculator module, fallback to generic Exception
    return getattr(Calculator, name, fallback)

@pytest.mark.parametrize("a,b,expected", [
    (2, 3, 6),
    (0, 5, 0),
    (-2, 4, -8),
    (2.5, 4, 10.0),
])
def test_multiply_function_and_class_method(a, b, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Act
    # Assert
    # Module-level multiply
    result_module = Calculator.multiply(a, b)
    assert result_module == expected
    # If Calculator class exists and has a multiply method, assert that too
    CalcClass = getattr(Calculator, "Calculator", None)
    if CalcClass is not None:
        calc_instance = CalcClass()
        multiply_method = getattr(calc_instance, "multiply", None)
        if callable(multiply_method):
            result_method = multiply_method(a, b)
            assert result_method == expected

@pytest.mark.parametrize("numerator,denominator,expected", [
    (6, 3, 2.0),
    (7, 2, 3.5),
])
def test_divide_normal_cases(numerator, denominator, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    # Act
    result = Calculator.divide(numerator, denominator)
    # Assert
    # Allow ints or floats as result types but value must match expected numerically
    assert isinstance(result, (int, float))
    assert result == expected
    # Also test class method if available
    CalcClass = getattr(Calculator, "Calculator", None)
    if CalcClass is not None:
        calc_instance = CalcClass()
        divide_method = getattr(calc_instance, "divide", None)
        if callable(divide_method):
            result_method = divide_method(numerator, denominator)
            assert isinstance(result_method, (int, float))
            assert result_method == expected

def test_divide_by_zero_raises():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    numerator = 1
    denominator = 0
    exc = _exc_lookup("CalculatorError", Exception)
    # Act / Assert for module-level function
    with pytest.raises(_exc_lookup("exc", Exception)):
        Calculator.divide(numerator, denominator)
    # Also assert class method raises if present
    CalcClass = getattr(Calculator, "Calculator", None)
    if CalcClass is not None:
        calc_instance = CalcClass()
        divide_method = getattr(calc_instance, "divide", None)
        if callable(divide_method):
            with pytest.raises(_exc_lookup("exc", Exception)):
                divide_method(numerator, denominator)

def test_save_history_writes_file(tmp_path):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    hist_lines = ["1 + 2 = 3", "3 * 4 = 12"]
    target_file = tmp_path / "history.txt"
    # Try module-level save_history function first
    save_fn = getattr(SimpleCalculatorPyQt1, "save_history", None)
    if callable(save_fn):
        # Try multiple call signatures in a safe try/except manner
        called = False
        # Attempt signature: save_history(path, history)
        try:
            save_fn(str(target_file), hist_lines)
            called = True
        except TypeError:
            pass
        # Attempt signature: save_history(history, path)
        if not called:
            try:
                save_fn(hist_lines, str(target_file))
                called = True
            except TypeError:
                pass
        # Attempt signature: save_history(path) relying on module/global history
        if not called:
            try:
                # Inject a global history into module if expected
                setattr(SimpleCalculatorPyQt1, "history", hist_lines)
                save_fn(str(target_file))
                called = True
            except TypeError:
                pass
        if not called:
            pytest.skip("save_history exists but no compatible call signature found")
    else:
        # Fall back to MainWindow.save_history method if present
        MainWindow = getattr(SimpleCalculatorPyQt1, "MainWindow", None)
        if MainWindow is None:
            pytest.skip("No save_history function and no MainWindow available to test saving history")
        # Instantiate without invoking Qt event loop if possible
        try:
            mw = MainWindow()
        except Exception:
            pytest.skip("Unable to instantiate MainWindow for save_history test")
        # Try to set history attribute if present
        if hasattr(mw, "history"):
            setattr(mw, "history", hist_lines)
        save_method = getattr(mw, "save_history", None)
        if not callable(save_method):
            pytest.skip("MainWindow has no callable save_history method")
        # Try calling save_history with path or without
        called = False
        try:
            save_method(str(target_file))
            called = True
        except TypeError:
            pass
        if not called:
            try:
                # Some implementations may accept no args and use self.history
                save_method()
                called = True
            except TypeError:
                pass
        if not called:
            pytest.skip("MainWindow.save_history exists but no compatible call signature found")
    # Assert: file exists and contains the history lines
    assert target_file.exists(), "History file was not created"
    content = target_file.read_text()
    for line in hist_lines:
        assert line in content, f"Expected history line '{line}' not found in file"
