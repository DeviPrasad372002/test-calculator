
# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.exists(_target):
    if _target not in sys.path: sys.path.insert(0, _target)
    try: os.chdir(_target)
    except Exception: pass

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

def _apply_compatibility_fixes():
    try:
        import jinja2
        if not hasattr(jinja2, 'Markup'):
            try:
                from markupsafe import Markup, escape
                jinja2.Markup = Markup
                if not hasattr(jinja2, 'escape'):
                    jinja2.escape = escape
            except Exception:
                pass
    except ImportError:
        pass
    try:
        import collections as _collections, collections.abc as _abc
        for _n in ('Mapping','MutableMapping','Sequence','Iterable','Container',
                   'MutableSequence','Set','MutableSet','Iterator','Generator','Callable','Collection'):
            if not hasattr(_collections, _n) and hasattr(_abc, _n):
                setattr(_collections, _n, getattr(_abc, _n))
    except Exception:
        pass
    try:
        import marshmallow as _mm
        if not hasattr(_mm, "__version__"):
            _mm.__version__ = "4"
    except Exception:
        pass

_apply_compatibility_fixes()

# Minimal, safe Django bootstrap. If anything goes wrong, skip the module (repo-agnostic).
try:
    import django
    from django.conf import settings as _dj_settings
    from django import apps as _dj_apps

    if not _dj_settings.configured:
        _cfg = dict(
            DEBUG=True,
            SECRET_KEY='pytest-secret',
            DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
            INSTALLED_APPS=[
                'django.contrib.auth','django.contrib.contenttypes',
                'django.contrib.sessions','django.contrib.messages'
            ],
            MIDDLEWARE=[
                'django.middleware.security.SecurityMiddleware',
                'django.contrib.sessions.middleware.SessionMiddleware',
                'django.middleware.common.CommonMiddleware',
            ],
            USE_TZ=True, TIME_ZONE='UTC',
        )
        try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
        except Exception: pass
        try: _dj_settings.configure(**_cfg)
        except Exception: pass

    if not _dj_apps.ready:
        try: django.setup()
        except Exception: pass

    # Probe a known Django core that previously crashed on some stacks.
    try:
        import django.contrib.auth.base_user as _dj_probe  # noqa
    except Exception as _e:
        _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
except Exception as _e:
    # Do NOT crash the entire test session â€“ make the module opt-out.
    _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)


for __qt_root in ["PyQt5","PyQt6","PySide2","PySide6"]:
    try:
        import importlib.util as _iu
        if _iu.find_spec(__qt_root) is None:
            raise ImportError
    except Exception:
        pass

# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

import pytest
import importlib

try:
    Calculator = importlib.import_module("Calculator")
except Exception:
    pytest.skip("Could not import module 'Calculator'; skipping tests", allow_module_level=True)

def _exc_lookup(name, default):
    return getattr(Calculator, name, default)

@pytest.mark.parametrize(
    "op,a,b,expected",
    [
        ("add", 1, 2, 3),
        ("subtract", 5, 3, 2),
        ("multiply", 4, 2, 8),
        ("divide", 7, 2, 3.5),
        ("divide", 9, 3, 3.0),
        ("add", -1, -2, -3),
        ("multiply", 10**6, 10**6, 10**12),
    ],
)
def test_calculator_basic_operations_return_correct_value_and_type(op, a, b, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = getattr(Calculator, "Calculator")()
    method = getattr(calc, op)

    # Act
    result = method(a, b)

    # Assert: numeric result and correct value (allow small float tolerance)
    assert isinstance(result, (int, float)), "Result should be numeric"
    if isinstance(expected, _exc_lookup("float", Exception)):
        assert pytest.approx(expected, rel=1e-9, abs=1e-12) == result
    else:
        assert result == expected

    # Assert: if Calculator tracks history, the most recent entry reflects the result
    if hasattr(calc, "history"):
        hist = getattr(calc, "history")
        assert isinstance(hist, _exc_lookup("list", Exception)), "history attribute should be a list when present"
        assert hist[-1] == result

def test_calculator_divide_by_zero_raises_calculator_error():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = getattr(Calculator, "Calculator")()
    calc_div = getattr(calc, "divide")

    # Act / Assert
    CalculatorError = _exc_lookup("CalculatorError", Exception)
    with pytest.raises(_exc_lookup("CalculatorError", Exception)):
        calc_div(1, 0)

def test_calculator_init_provides_expected_initial_state_or_skips_if_not_present():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange / Act
    calc = getattr(Calculator, "Calculator")()

    # Assert: prefer that a 'history' attribute exists and starts empty; if not present, skip
    if not hasattr(calc, "history"):
        pytest.skip("Calculator.history not implemented; skipping init-state-specific assertions")
    hist = getattr(calc, "history")
    assert isinstance(hist, _exc_lookup("list", Exception)), "history should be a list after initialization"
    assert len(hist) == 0, "history should be empty after initialization"

def test_history_accumulates_after_multiple_operations_if_supported():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = getattr(Calculator, "Calculator")()
    ops = [
        (getattr(calc, "add"), (1, 2)),
        (getattr(calc, "multiply"), (3, 4)),
        (getattr(calc, "subtract"), (10, 1)),
        (getattr(calc, "divide"), (8, 2)),
    ]

    # Act
    results = []
    for func, args in ops:
        results.append(func(*args))

    # Assert: only meaningful if history exists
    if not hasattr(calc, "history"):
        pytest.skip("Calculator.history not implemented; skipping history-accumulation assertions")

    hist = getattr(calc, "history")
    assert isinstance(hist, _exc_lookup("list", Exception))
    assert len(hist) >= len(results), "history should have at least as many entries as operations performed"
    # Check that the last N entries correspond to our operations in order
    tail = hist[-len(results):]
    for expected, actual in zip(results, tail):
        assert actual == expected, "History entry should match operation result"
