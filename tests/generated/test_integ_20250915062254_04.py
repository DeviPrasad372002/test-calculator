
# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT")
if _target and os.path.isdir(_target):
    if _target not in sys.path: sys.path.insert(0, _target)

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

# Optional Django bootstrap to avoid masking real failures by default.
if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

import os
os.environ.setdefault('QT_QPA_PLATFORM', 'offscreen')
for __qt_root in ['PyQt5','PyQt6','PySide2','PySide6']:
    try:
        import importlib.util as _iu
        if _iu.find_spec(__qt_root) is None:
            raise ImportError
    except Exception:
        pass
# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

import builtins
import inspect
import pytest
try:
    import Calculator as calc_mod
    import SimpleCalculatorPyQt1 as ui_mod
except ImportError as e:
    pytest.skip("requires Calculator and SimpleCalculatorPyQt1 modules: %s" % e, allow_module_level=True)

@pytest.mark.parametrize(
    "method,a,b,expected,expect_error",
    [
        ("add", 1, 2, 3, False),
        ("subtract", 5, 3, 2, False),
        ("multiply", 4, 3, 12, False),
        ("divide", 10, 2, 5, False),
        ("divide", 1, 0, None, True),  # error path: division by zero
    ],
)
def test_calculator_basic_operations_and_history_param(method, a, b, expected, expect_error):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    Calculator = getattr(calc_mod, "Calculator")
    CalculatorError = getattr(calc_mod, "CalculatorError", ZeroDivisionError)
    calc = Calculator()

    # Act / Assert
    op = getattr(calc, method)
    if expect_error:
        with pytest.raises(CalculatorError):
            op(a, b)
    else:
        result = op(a, b)
        # Assert result type and value
        assert isinstance(result, (int, float)), "result should be numeric"
        assert result == expected

    # Assert history state changed appropriately for non-error cases
    if not expect_error:
        assert hasattr(calc, "history"), "Calculator should expose a history attribute"
        assert isinstance(calc.history, list)
        # The most recent entry should mention the expected result when stringified
        assert any(str(expected) in str(entry) for entry in calc.history), \
            "history should contain the operation/result"

def _call_save_history_flexible(save_fn, history, path):
    """
    Helper to call save_history with flexible signatures:
    - save_history(history, path)
    - save_history(path)
    - save_history(self, history, path) / bound methods
    Returns whatever the function returns.
    Raises pytest.skip if signature is unsupported.
    """
    sig = inspect.signature(save_fn)
    params = list(sig.parameters.values())
    # bound method will have 'self' as first parameter but it's already bound; inspect will reflect fewer args.
    num_params = len(params)
    if num_params == 2:
        return save_fn(history, path)
    if num_params == 1:
        # assume signature like save_history(path) or save_history(history)
        # prefer calling with path if parameter name suggests it
        pname = params[0].name.lower()
        if "path" in pname or "file" in pname or "filename" in pname:
            return save_fn(path)
        else:
            return save_fn(history)
    if num_params == 0:
        # maybe the function uses module-level state / GUI; can't call safely
        pytest.skip("save_history has no parameters and likely depends on GUI state; skipping", allow_module_level=False)
    # Fallback: unsupported signature
    pytest.skip(f"unsupported save_history signature with {num_params} parameters", allow_module_level=False)

def _get_save_history():
    save_fn = getattr(ui_mod, "save_history", None)
    if not callable(save_fn):
        pytest.skip("save_history not found in UI module; skipping integration test", allow_module_level=False)
    return save_fn

def test_save_history_writes_file_integration(tmp_path):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    Calculator = getattr(calc_mod, "Calculator")
    calc = Calculator()
    # Perform some operations to populate history
    a_result = getattr(calc, "add")(2, 1)   # expect 3
    b_result = getattr(calc, "multiply")(3, 4)  # expect 12
    assert hasattr(calc, "history") and isinstance(calc.history, list)

    save_fn = _get_save_history()
    out_file = tmp_path / "history.txt"

    # Act
    _call_save_history_flexible(save_fn, calc.history, str(out_file))

    # Assert
    assert out_file.exists(), "save_history should create the output file"
    text = out_file.read_text()
    assert isinstance(text, str) and len(text) > 0
    # Check that results are mentioned in the file
    assert str(a_result) in text, "saved history should include the first result"
    assert str(b_result) in text, "saved history should include the second result"

def test_ui_save_history_handles_open_error(monkeypatch, tmp_path):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    Calculator = getattr(calc_mod, "Calculator")
    calc = Calculator()
    getattr(calc, "add")(7, 8)  # populate history

    save_fn = _get_save_history()
    out_file = tmp_path / "no_write.txt"

    # Monkeypatch builtins.open to raise a PermissionError whenever invoked
    def fake_open(*args, **kwargs):
        raise PermissionError("mocked permission error")

    monkeypatch.setattr(builtins, "open", fake_open)

    # Act / Assert: Expect PermissionError to be raised when saving
    with pytest.raises(PermissionError):
        _call_save_history_flexible(save_fn, calc.history, str(out_file))
