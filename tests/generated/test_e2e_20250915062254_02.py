
# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT")
if _target and os.path.isdir(_target):
    if _target not in sys.path: sys.path.insert(0, _target)

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

# Optional Django bootstrap to avoid masking real failures by default.
if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

import os
os.environ.setdefault('QT_QPA_PLATFORM', 'offscreen')
for __qt_root in ['PyQt5','PyQt6','PySide2','PySide6']:
    try:
        import importlib.util as _iu
        if _iu.find_spec(__qt_root) is None:
            raise ImportError
    except Exception:
        pass
# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

import pytest
import inspect
import types
from pathlib import Path

# Import the Calculator module under test (should be local in the test environment)
from target import Calculator as calc_module

Calculator = getattr(calc_module, "Calculator")
CalculatorError = getattr(calc_module, "CalculatorError", ZeroDivisionError)


@pytest.mark.parametrize(
    "a,b,expected",
    [
        (2, 3, 6),          # positive integers
        (0, 5, 0),          # multiply by zero
        (-2, 3, -6),        # negative * positive
        (1.5, 2, 3.0),      # float * int -> float
    ],
)
def test_calculator_multiply_various(a, b, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = Calculator()

    # Act
    result = calc.multiply(a, b)

    # Assert
    assert result == expected
    assert isinstance(result, type(expected))


@pytest.mark.parametrize(
    "numerator,denominator,expected",
    [
        (6, 3, 2),
        (7, 2, 3.5),
    ],
)
def test_calculator_divide_normal_cases(numerator, denominator, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = Calculator()

    # Act
    result = calc.divide(numerator, denominator)

    # Assert
    assert result == expected
    assert isinstance(result, type(expected))


def test_calculator_divide_by_zero_raises():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = Calculator()
    expected_exc = CalculatorError

    # Act / Assert
    with pytest.raises(expected_exc):
        calc.divide(1, 0)


def _import_ui_module_or_skip():
    """
    Try to import the UI module that provides save_history. If import fails due to
    missing third-party dependencies (e.g. PyQt5), skip the test at runtime.
    """
    try:
        from target import SimpleCalculatorPyQt1 as ui_mod  # local module under test
        return ui_mod
    except ImportError as exc:
        pytest.skip(f"UI module import failed, skipping UI tests: {exc}", allow_module_level=True)


def _call_save_history_flexible(ui_mod, history_items, file_path: Path):
    """
    Flexible caller for save_history: handles either a module-level function
    or an unbound method defined on a class that expects 'self'.
    - If ui_mod.save_history exists and is callable, try calling it with (file_path,)
      or with (dummy_self, file_path) if it needs a self.
    - Otherwise, try to get MainWindow.save_history and call it as an unbound function
      passing a dummy object that has a .history attribute.
    Returns True on successful write (file created), False otherwise.
    """
    target_path_str = str(file_path)
    # Case 1: module-level function save_history
    save_func = getattr(ui_mod, "save_history", None)
    if callable(save_func):
        # Try calling save_func in several ways to be tolerant of different signatures:
        # - save_history(path)
        # - save_history(self, path)   (call with dummy self)
        try:
            # Act
            # Try simple call first
            save_func(target_path_str)
        except TypeError:
            # Try calling as if it's an unbound method needing self
            dummy_self = types.SimpleNamespace(history=history_items)
            save_func(dummy_self, target_path_str)
        return file_path.exists()

    # Case 2: method on MainWindow class
    mw_class = getattr(ui_mod, "MainWindow", None)
    if mw_class is None:
        # Nothing to call
        return False

    # Try to retrieve the function object for save_history from the class
    mw_save = getattr(mw_class, "save_history", None)
    if mw_save is None:
        return False

    # Call the unbound function with a dummy object that has .history attribute
    dummy_self = types.SimpleNamespace(history=history_items)
    # If the method is a function descriptor, calling it directly will work:
    try:
        mw_save(dummy_self, target_path_str)
    except TypeError:
        # Perhaps method expects only self and will open a dialog; try providing only self
        mw_save(dummy_self)
    return file_path.exists()


def test_save_history_writes_history_to_file(tmp_path):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    ui_mod = _import_ui_module_or_skip()
    # Create some distinctive history entries to assert their presence in the saved file.
    history_items = [
        "1 + 1 = 2",
        "3 * 4 = 12",
        "10 / 2 = 5",
    ]
    out_file = tmp_path / "history_output.txt"

    # Act
    wrote_file = _call_save_history_flexible(ui_mod, history_items, out_file)

    # Assert - ensure the file was created and contains at least one history entry
    assert wrote_file, "save_history did not create the file as expected"

    content = out_file.read_text(encoding="utf-8")
    assert isinstance(content, str)
    # Verify that at least one of the history strings is present in the saved output
    assert any(item in content for item in history_items), "Saved history does not contain expected entries"
