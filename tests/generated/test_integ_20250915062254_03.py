
# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT")
if _target and os.path.isdir(_target):
    if _target not in sys.path: sys.path.insert(0, _target)

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

# Optional Django bootstrap to avoid masking real failures by default.
if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

import os
os.environ.setdefault('QT_QPA_PLATFORM', 'offscreen')
for __qt_root in ['PyQt5','PyQt6','PySide2','PySide6']:
    try:
        import importlib.util as _iu
        if _iu.find_spec(__qt_root) is None:
            raise ImportError
    except Exception:
        pass
# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

import pytest
from types import SimpleNamespace

try:
    import Calculator as calculator_mod
    import SimpleCalculatorPyQt1 as simple_mod
except ImportError as e:
    pytest.skip(f"Required integration modules not available: {e}", allow_module_level=True)

import os

# Helper to obtain an operation function either from module-level or from Calculator class
def _get_operation_fn(name):
    fn = getattr(calculator_mod, name, None)
    if callable(fn):
        return fn
    CalcClass = getattr(calculator_mod, "Calculator", None)
    if CalcClass is not None:
        # try instance method
        inst = CalcClass()
        fn = getattr(inst, name, None)
        if callable(fn):
            return fn
    return None

@pytest.mark.parametrize(
    "op_name,a,b,expected",
    [
        ("add", 2, 3, 5),
        ("subtract", 10, 4, 6),
        ("multiply", -2, 3, -6),
        ("divide", 7, 2, 3.5),
        ("add", 0.1, 0.2, 0.30000000000000004),
    ],
)
def test_calculator_basic_operations_and_save_history(tmp_path, op_name, a, b, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    op_fn = _get_operation_fn(op_name)
    if op_fn is None:
        pytest.skip(f"Operation function {op_name} not available in Calculator module")

    history = []
    outfile = tmp_path / "history.txt"

    save_history = getattr(simple_mod, "save_history", None)
    if save_history is None:
        pytest.skip("save_history not available in SimpleCalculatorPyQt1 module")

    # Act
    result = op_fn(a, b)

    # Assert - result type and value
    assert isinstance(result, (int, float))
    # use approx for potential float rounding
    assert result == pytest.approx(expected)

    # Arrange - create a history entry and save
    history_entry = f"{op_name}({a},{b})={result}"
    history.append(history_entry)

    # Act - call save_history to write to disk
    # save_history may accept (history_list, filename) or (filename, history_list). Try both.
    wrote = False
    try:
        save_history(history, str(outfile))
        wrote = True
    except TypeError:
        # try reversed args
        try:
            save_history(str(outfile), history)
            wrote = True
        except TypeError:
            pytest.skip("save_history signature not compatible with (history, path) or (path, history)")

    assert wrote and outfile.exists()

    # Assert - file contains our history entry as a line
    content = outfile.read_text().splitlines()
    assert any(history_entry in line for line in content)

def test_divide_by_zero_raises_calculator_error():
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    div_fn = _get_operation_fn("divide")
    if div_fn is None:
        pytest.skip("divide function not available in Calculator module")

    # Expected exception fallback per instructions
    ExpectedError = getattr(calculator_mod, "CalculatorError", ZeroDivisionError)

    # Act / Assert
    with pytest.raises(ExpectedError):
        div_fn(1, 0)

@pytest.mark.parametrize(
    "initial_items, initial_text",
    [
        (["one", "two", "three"], "123"),
        ([], ""),  # edge case: already empty
    ],
)
def test_clear_history_and_clear_input_affect_state(tmp_path, initial_items, initial_text):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange - create fake widgets that mimic minimal Qt API used by clear_history / clear_input
    class FakeHistoryWidget:
        def __init__(self, items):
            self._items = list(items)
            self.cleared = False

        # common Qt container method
        def clear(self):
            self._items.clear()
            self.cleared = True

        # provide a way to inspect state
        def items(self):
            return list(self._items)

        def count(self):
            return len(self._items)

    class FakeInputWidget:
        def __init__(self, text):
            self._text = text

        # QLineEdit-like methods
        def clear(self):
            self._text = ""

        def setText(self, t):
            self._text = t

        def text(self):
            return self._text

    history_widget = FakeHistoryWidget(initial_items)
    input_widget = FakeInputWidget(initial_text)

    clear_history = getattr(simple_mod, "clear_history", None)
    clear_input = getattr(simple_mod, "clear_input", None)

    if clear_history is None:
        pytest.skip("clear_history not available in SimpleCalculatorPyQt1 module")
    if clear_input is None:
        pytest.skip("clear_input not available in SimpleCalculatorPyQt1 module")

    # Act - try calling clear_history; some implementations may expect a widget or the main window.
    # Try passing our fake widget; if signature doesn't accept it, skip the test.
    try:
        clear_history(history_widget)
    except TypeError:
        pytest.skip("clear_history signature not compatible with (history_widget,)")

    # Assert - history cleared
    assert history_widget.cleared is True
    assert history_widget.count() == 0

    # Act - clear input, likewise handle signature mismatch
    try:
        clear_input(input_widget)
    except TypeError:
        # Try clear_input with no args; maybe it uses global state - skip in that case
        try:
            clear_input()
            # If it worked without args, we can't inspect our fake widget, but consider the call successful.
            return
        except TypeError:
            pytest.skip("clear_input signature not compatible with (input_widget,) or ()")

    # Assert - input cleared
    assert input_widget.text() == ""
