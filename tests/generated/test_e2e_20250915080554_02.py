
# --- ENHANCED UNIVERSAL BOOTSTRAP ---
import os, sys, importlib.util as _iu, types as _types, pytest as _pytest, builtins as _builtins, warnings
STRICT = os.getenv("TESTGEN_STRICT", "1").lower() in ("1","true","yes")
STRICT_FAIL = os.getenv("TESTGEN_STRICT_FAIL","0").lower() in ("1","true","yes")
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", category=PendingDeprecationWarning)

_target = os.environ.get("TARGET_ROOT") or os.environ.get("ANALYZE_ROOT") or "target"
if _target and os.path.isdir(_target):
    _parent = os.path.abspath(os.path.join(_target, os.pardir))
    for p in (_parent, _target):
        if p not in sys.path:
            sys.path.insert(0, p)
    if "target" not in sys.modules:
        _pkg = _types.ModuleType("target")
        _pkg.__path__ = [_target]  # behave like a namespace package
        sys.modules["target"] = _pkg

def _exc_lookup(name, default):
    try:
        mod_name, _, cls_name = str(name).rpartition(".")
        if mod_name:
            mod = __import__(mod_name, fromlist=[cls_name])
            return getattr(mod, cls_name, default)
        return getattr(sys.modules.get("builtins"), str(name), default)
    except Exception:
        return default

# Optional Django bootstrap to avoid masking real failures by default.
if os.getenv("TESTGEN_ENABLE_DJANGO_BOOTSTRAP","0") in ("1","true","yes"):
    try:
        import django
        from django.conf import settings as _dj_settings
        from django import apps as _dj_apps
        if not _dj_settings.configured:
            _cfg = dict(
                DEBUG=True, SECRET_KEY='pytest-secret',
                DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3','NAME': ':memory:'}},
                INSTALLED_APPS=['django.contrib.auth','django.contrib.contenttypes','django.contrib.sessions','django.contrib.messages'],
                MIDDLEWARE=['django.middleware.security.SecurityMiddleware','django.contrib.sessions.middleware.SessionMiddleware','django.middleware.common.CommonMiddleware'],
                USE_TZ=True, TIME_ZONE='UTC',
            )
            try: _cfg["DEFAULT_AUTO_FIELD"] = "django.db.models.AutoField"
            except Exception: pass
            try: _dj_settings.configure(**_cfg)
            except Exception: pass
        if not _dj_apps.ready:
            try: django.setup()
            except Exception: pass
        try: import django.contrib.auth.base_user as _dj_probe  # noqa
        except Exception as _e:
            _pytest.skip(f"Django core import failed safely: {_e.__class__.__name__}: {_e}", allow_module_level=True)
    except Exception as _e:
        _pytest.skip(f"Django bootstrap not available: {_e.__class__.__name__}: {_e}", allow_module_level=True)

import os
os.environ.setdefault('QT_QPA_PLATFORM', 'offscreen')
for __qt_root in ['PyQt5','PyQt6','PySide2','PySide6']:
    try:
        import importlib.util as _iu
        if _iu.find_spec(__qt_root) is None:
            raise ImportError
    except Exception:
        pass
# --- /ENHANCED UNIVERSAL BOOTSTRAP ---

import pytest
import inspect
from types import SimpleNamespace
from pathlib import Path

# Guard third-party GUI dependency at module import time
try:
    import PyQt5  # presence indicates GUI module can be imported
except ImportError:
    pytest.skip("PyQt5 not available; skipping GUI-dependent E2E tests", allow_module_level=True)

# Import modules under test; skip module if not importable
try:
    import Calculator
except ImportError:
    pytest.skip("Calculator module not available; skipping tests", allow_module_level=True)

try:
    import SimpleCalculatorPyQt1
except ImportError:
    pytest.skip("SimpleCalculatorPyQt1 module not available; skipping tests", allow_module_level=True)


@pytest.mark.parametrize(
    "a,b,expected",
    [
        (2, 3, 6),                 # small ints
        (0, 12345, 0),             # multiply by zero
        (-4, 5, -20),              # negative operand
        (1.5, 2, 3.0),             # float * int
        (10**6, 10**6, 10**12),    # large integers
    ],
)
def test_calculator_multiply_various_cases(a, b, expected):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = getattr(Calculator, "Calculator")()  # public constructor
    # Act
    result = calc.multiply(a, b)
    # Assert
    # Exact match for ints, approximate for floats
    if isinstance(expected, float):
        assert isinstance(result, float)
        assert abs(result - expected) <= 1e-9
    else:
        assert result == expected
        assert isinstance(result, (int, float))


@pytest.mark.parametrize(
    "numerator,denominator,expected_or_exception",
    [
        (6, 3, 2),                      # exact integer division
        (7, 2, 3.5),                    # non-integer result
        (0, 5, 0),                      # zero numerator
        (5, 0, getattr(Calculator, "CalculatorError", ZeroDivisionError)),  # division by zero -> error
    ],
)
def test_calculator_divide_normal_and_error_paths(numerator, denominator, expected_or_exception):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    calc = getattr(Calculator, "Calculator")()
    # Act / Assert
    if isinstance(expected_or_exception, type) and issubclass(expected_or_exception, BaseException):
        with pytest.raises(expected_or_exception):
            calc.divide(numerator, denominator)
    else:
        result = calc.divide(numerator, denominator)
        # Assert result numeric and correct
        if isinstance(expected_or_exception, float):
            assert isinstance(result, float)
            assert abs(result - expected_or_exception) <= 1e-9
        else:
            assert result == expected_or_exception


def _resolve_save_history_callable():
    """
    Try to locate a callable for saving history in the SimpleCalculatorPyQt1 module.
    Prefer a free function 'save_history', otherwise a method on 'MainWindow'.
    Returns a tuple (callable, call_style) where call_style is one of:
      - "func_self_filename" -> callable(self, filename)
      - "func_filename" -> callable(filename)
      - "bound_method" -> method bound to an instantiated MainWindow: method(filename)
    """
    # Try a module-level function first
    save_fn = getattr(SimpleCalculatorPyQt1, "save_history", None)
    if callable(save_fn):
        sig = inspect.signature(save_fn)
        params = list(sig.parameters.keys())
        if len(params) == 2:
            return save_fn, "func_self_filename"
        if len(params) == 1:
            return save_fn, "func_filename"
        # fallback to treating it as self/filename style
        return save_fn, "func_self_filename"

    # Try a MainWindow class with an instance method
    MainWindow = getattr(SimpleCalculatorPyQt1, "MainWindow", None)
    if MainWindow is not None and inspect.isclass(MainWindow):
        # Try to construct a MainWindow with no arguments
        try:
            instance = MainWindow()
            # Look for bound save_history on the instance
            bound = getattr(instance, "save_history", None)
            if callable(bound):
                return bound, "bound_method"
        except TypeError:
            # Constructor requires args; create a lightweight fake instance by bypassing __init__
            try:
                instance = object.__new__(MainWindow)
                bound = getattr(instance, "save_history", None)
                if callable(bound):
                    return bound, "bound_method"
            except Exception:
                pass

    return None, None


def test_save_history_writes_file_and_contents(tmp_path):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    save_callable, style = _resolve_save_history_callable()
    if save_callable is None:
        pytest.skip("No usable save_history callable found in SimpleCalculatorPyQt1")

    # Prepare a dummy history provider. Many implementations expect self.history to be a list of strings.
    dummy_history = ["1 + 2 = 3", "4 * 5 = 20"]
    Dummy = SimpleNamespace(history=list(dummy_history))
    target_file = tmp_path / "history.txt"
    target_path_str = str(target_file)

    # Act
    if style == "func_self_filename":
        # call as save_history(self_like, filename)
        save_callable(Dummy, target_path_str)
    elif style == "func_filename":
        # call as save_history(filename)
        save_callable(target_path_str)
    elif style == "bound_method":
        # bound method likely expects filename only
        save_callable(target_path_str)
    else:
        pytest.skip("Incompatible save_history signature; cannot exercise function under test")

    # Assert
    assert target_file.exists(), "save_history did not create the expected file"
    content = target_file.read_text(encoding="utf-8")
    # Each history entry should appear in the file
    for entry in dummy_history:
        assert entry in content


def test_save_history_nonexistent_directory_raises(tmp_path):
    # Arrange-Act-Assert: generated by ai-testgen
    # Arrange
    save_callable, style = _resolve_save_history_callable()
    if save_callable is None:
        pytest.skip("No usable save_history callable found in SimpleCalculatorPyQt1")

    Dummy = SimpleNamespace(history=["irrelevant"])
    # Point to a nested non-existent directory; typical save functions will raise an OSError / FileNotFoundError
    bad_path = tmp_path / "no_such_dir" / "subdir" / "out.txt"
    bad_path_str = str(bad_path)

    # Act / Assert: saving into a non-existent directory should raise an exception (FileNotFoundError or OSError)
    expected_exc = (FileNotFoundError, OSError)
    if style == "func_self_filename":
        with pytest.raises(expected_exc):
            save_callable(Dummy, bad_path_str)
    elif style == "func_filename":
        with pytest.raises(expected_exc):
            save_callable(bad_path_str)
    elif style == "bound_method":
        with pytest.raises(expected_exc):
            save_callable(bad_path_str)
    else:
        pytest.skip("Incompatible save_history signature; cannot exercise error path")
